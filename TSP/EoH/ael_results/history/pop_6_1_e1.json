{
     "parent1": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix based on the occurrence of each edge used in the local optimal tour with a noise factor that depends on a custom combination of edge count and distance to guide the search towards a better solution using a modified scoring function.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_count = np.zeros_like(edge_distance)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n    \n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                noise_factor = 0.8 * np.random.uniform() * (1 / edge_count[i][j]) + (edge_distance[i][j] / np.mean(edge_distance))\n                updated_edge_distance[i][j] += noise_factor\n\n    return updated_edge_distance",
          "objective": 0.03736,
          "other_inf": null
     },
     "parent2": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix based on the sum of the frequency of each edge used in the local optimal tour and the reciprocal of the edge count to guide the search towards a better solution.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_n_used)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                updated_edge_distance[i][j] += (edge_count[i][j] + (1 / max(edge_n_used[i][j], 1)))\n\n    return updated_edge_distance",
          "objective": 0.04299,
          "other_inf": null
     },
     "parent3": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix based on the occurrence of each edge used in the local optimal tour with a noise factor that depends on a custom combination of edge count and distance to guide the search towards a better solution using a modified scoring function.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_count = np.zeros_like(edge_distance)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n    \n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                noise_factor = 0.8 * np.random.uniform() * (1 / edge_count[i][j]) + (edge_distance[i][j] / np.mean(edge_distance))\n                updated_edge_distance[i][j] += noise_factor\n\n    return updated_edge_distance",
          "objective": 0.03736,
          "other_inf": null
     },
     "parent4": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix based on the occurrence of each edge used in the local optimal tour with a noise factor that depends on a custom combination of edge count, distance, and edge usage to guide the search towards a better solution using a modified scoring function with a lower noise factor, a higher weight for edge count, and a penalty for overused edges.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_count = np.zeros_like(edge_distance)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n    \n    mean_edge_distance = np.mean(edge_distance)\n    max_edge_usage = np.max(edge_n_used)\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                noise_factor = 0.5 * np.random.uniform() * (1 / edge_count[i][j]) + (edge_distance[i][j] / mean_edge_distance) - 0.2 * (edge_n_used[i][j] / max_edge_usage)\n                updated_edge_distance[i][j] += noise_factor * (1 + edge_count[i][j])\n\n    return updated_edge_distance",
          "objective": 0.02789,
          "other_inf": null
     },
     "parent5": {
          "algorithm": "Update the edge distances by considering the frequency of each edge used in the local optimal tour and incorporating a custom non-linear transformation of the edge count and distance, along with a normalized factor based on the reciprocal of edge usage, to guide the search towards a better solution.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_distance)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                transformation_factor = (edge_count[i][j] ** 2) / (edge_distance[i][j] + 1)  # Custom non-linear transformation\n                normalized_factor = (1 / max(edge_n_used[i][j], 1))\n                updated_edge_distance[i][j] += transformation_factor + normalized_factor\n\n    return updated_edge_distance",
          "objective": 0.05561,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix based on the combination of edge count, distance, and edge usage, by applying a non-linear transformation with a custom formula and adding a penalty for overused edges to guide the search towards a better solution.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_count = np.zeros_like(edge_distance)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                transformation_factor = (edge_count[i][j] ** 2) / (edge_distance[i][j] + 1)  # Custom non-linear transformation\n                penalty_factor = 0.2 * (edge_n_used[i][j] / np.max(edge_n_used))  # Penalty for overused edges\n                updated_edge_distance[i][j] += transformation_factor - penalty_factor\n\n    return updated_edge_distance",
          "objective": 0.04801,
          "other_inf": null
     }
}