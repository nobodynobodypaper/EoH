{
     "parent1": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by applying a modified version of the ant colony optimization algorithm, where the pheromone levels are determined by the edge usage and the difference between the local and global optimum tours, and sorts the nodes based on the pheromone levels to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    pheromone_levels = (0.3 * edge_n_used) + (0.7 * (local_opt_tour - global_opt_tour))\n    new_distance_matrix = distance_matrix + pheromone_levels\n    perturb_nodes = np.argsort(np.max(pheromone_levels, axis=1))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.08767,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix and sorts the nodes based on the edge usage, local and global optimum tours, and the difference between them to determine the top nodes for perturbation, using a combination of weighted edge usage and tour differences.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    weighted_edge_usage = 0.4 * edge_n_used\n    tour_differences = 0.6 * (local_opt_tour - global_opt_tour)\n    perturb_values = weighted_edge_usage + tour_differences\n    new_distance_matrix = distance_matrix + perturb_values\n    perturb_nodes = np.argsort(np.max(perturb_values, axis=1))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06466,
          "other_inf": null
     }
}