{
     "parent1": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by using a combination of edge usage, the difference between local and global optimum tours, and a weighted random factor, then sorts the nodes based on the maximum edge usage and the minimum distance from the global optimum tour to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    weighted_random_factor = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1]) * 0.2\n    update_factor = (0.4 * edge_n_used) + (0.4 * (local_opt_tour - global_opt_tour)) + weighted_random_factor\n    new_distance_matrix = update_factor + distance_matrix\n    \n    max_edge_usage = np.max(edge_n_used, axis=1)\n    min_global_distance = np.min(new_distance_matrix, axis=1)\n    perturb_nodes = np.argsort(np.maximum(max_edge_usage, min_global_distance))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06261,
          "other_inf": null
     },
     "parent2": {
          "algorithm": "Create an algorithm that updates the distance matrix by incorporating a weighted combination of edge usage and the difference between local and global optimum tours, and then sorts the nodes based on the weighted combination of maximum edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    weighted_combination = (0.4 * edge_n_used) + (0.6 * (local_opt_tour - global_opt_tour))\n    \n    new_distance_matrix = distance_matrix + weighted_combination\n    \n    perturb_nodes = np.argsort((0.6 * np.max(edge_n_used, axis=1)) + (0.4 * np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06466,
          "other_inf": null
     },
     "parent3": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating a combination of the normalized edge usage, the average difference between local and global optimum tours, and the randomness, and sorts the nodes based on the maximum normalized edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.6 * (edge_n_used / np.max(edge_n_used))) + (0.4 * (local_opt_tour - global_opt_tour))\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = distance_matrix + combined_metric + (0.1 * randomness)\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.03538,
          "other_inf": null
     },
     "parent4": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by using a combination of edge usage, the difference between local and global optimum tours, and a weighted random factor, then sorts the nodes based on the maximum edge usage and the minimum distance from the global optimum tour to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    weighted_random_factor = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1]) * 0.2\n    update_factor = (0.4 * edge_n_used) + (0.4 * (local_opt_tour - global_opt_tour)) + weighted_random_factor\n    new_distance_matrix = update_factor + distance_matrix\n    \n    max_edge_usage = np.max(edge_n_used, axis=1)\n    min_global_distance = np.min(new_distance_matrix, axis=1)\n    perturb_nodes = np.argsort(np.maximum(max_edge_usage, min_global_distance))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06261,
          "other_inf": null
     },
     "parent5": {
          "algorithm": "Create a new algorithm that updates the distance matrix by considering the weighted sum of normalized edge usage, the difference between the local and global optimum tours, and randomness, and sorts the nodes based on the combination of edge usage and distance from the global optimum tour.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.6 * (edge_n_used / np.max(edge_n_used))) + (0.4 * (local_opt_tour - global_opt_tour))\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = distance_matrix + combined_metric + (0.1 * randomness)\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.05739,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by considering the geometric mean of edge usage and the difference between local and global optimum tours, and adds a random factor, then sorts the nodes based on the geometric mean of edge usage and the difference between local and global optimum tours to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    geometric_mean = np.sqrt(edge_n_used * (local_opt_tour - global_opt_tour))\n    random_factor = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1]) * 0.1\n    new_distance_matrix = distance_matrix + geometric_mean + random_factor\n    perturb_nodes = np.argsort(np.sqrt(geometric_mean))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "other_inf": null
     }
}