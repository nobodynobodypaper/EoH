{
     "parent1": {
          "algorithm": "\nAlgorithm description:\nThe algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by modifying the distances of these edges based on the number of times each edge is used in the tour. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed, taking into account the impact on both the local and global optimal tours. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix + np.max(distance_matrix) * edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    \n    for node in range(len(global_opt_tour) - 1):\n        global_start = global_opt_tour[node]\n        global_end = global_opt_tour[node+1]\n        new_distance_matrix[global_start][global_end] += np.max(distance_matrix) / (node + 1)\n        new_distance_matrix[global_end][global_start] += np.max(distance_matrix) / (node + 1)\n    \n    perturb_impact += np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    \n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.415,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nAlgorithm description: \nThe new algorithm will first identify the edges that are commonly used in the local optimal tour and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by adding a factor to these edges and adjusting the distances based on the potential impact of perturbing each node, rather than multiplying. Finally, it will sort the nodes based on the potential impact and return the updated distance matrix and the sorted nodes to perturb, prioritizing nodes that will lead to minimized total distance.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    \n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n    \n    new_distance_matrix = distance_matrix + edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-perturb_impact)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.357,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nThe new algorithm identifies the nodes with the highest impact on both local and global optimal tours by evaluating the combined reduction in total distance if each node is perturbed. It then updates the distance matrix based on these impacts and sorts the nodes to be perturbed to minimize the total distance traveled in the tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    impact_on_local_opt_tour = np.sum(edge_n_used * (distance_matrix - np.max(distance_matrix) * np.where(local_opt_tour[:, None] == local_opt_tour[None, :], 1, 0)), axis=1)\n    impact_on_global_opt_tour = np.sum(edge_n_used * (distance_matrix - np.max(distance_matrix) * np.where(global_opt_tour[:, None] == global_opt_tour[None, :], 1, 0)), axis=1)\n    combined_impact = impact_on_local_opt_tour + impact_on_global_opt_tour\n    \n    new_distance_matrix = distance_matrix + np.max(distance_matrix) * np.where(global_opt_tour[:, None] == global_opt_tour[None, :], 1, 0)\n    \n    perturb_nodes = np.argsort(-combined_impact)\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.301,
          "first_obj": null
     }
}