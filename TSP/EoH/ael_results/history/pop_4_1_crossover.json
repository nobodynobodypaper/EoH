{
     "parent1": {
          "algorithm": "\nThe algorithm idea is to identify edges that are commonly used in the local optimal tour and update the distance matrix by penalizing these edges based on their frequency of use. Then, sort the nodes based on the penalty to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_nodes = np.argsort(-penalty.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.474,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nThe algorithm idea is to update the distance matrix by penalizing edges frequently used in the local optimal tour, then sort the nodes based on the penalty to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour. \n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used!=0)\n    new_distance_matrix = distance_matrix + penalty\n    perturb_nodes = np.argsort(-penalty.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 1.159,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nThe new algorithm idea is to identify the edges that are not frequently used in the local optimal tour and update the distance matrix by rewarding these edges. Then, sort the nodes based on the reward to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    reward = np.zeros(distance_matrix.shape)\n    for i in range(len(distance_matrix)):\n        for j in range(len(distance_matrix[i])):\n            if edge_n_used[i][j] == 0:\n                reward[i][j] += 1\n    new_distance_matrix = distance_matrix - reward\n    perturb_nodes = np.argsort(-reward.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 2.309,
          "first_obj": null
     }
}