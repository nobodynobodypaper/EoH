{
     "parent1": {
          "algorithm": "\nNew algorithm: Randomly shuffle the edges in the local optimal tour to break the pattern and explore new possibilities, while keeping the tour valid, to escape from the local optimum and improve the solution.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    local_opt_tour_edges = [(local_opt_tour[i], local_opt_tour[i+1]) for i in range(len(local_opt_tour)-1)]\n    np.random.shuffle(local_opt_tour_edges)\n    \n    for i in range(len(local_opt_tour_edges)):\n        start_node = local_opt_tour_edges[i][0]\n        end_node = local_opt_tour_edges[i][1]\n        edge_index = edge_n_used[start_node][end_node]\n        noise_factor = np.random.uniform(-0.5, 0.5)  # Add random noise to the edge distance\n        updated_edge_distance[start_node][end_node] += noise_factor\n    \n    return updated_edge_distance",
          "objective": 0.29281,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Identify the longest edge in the local optimal tour and increase its distance by a small factor to break the pattern and explore new possibilities while keeping the tour valid, to escape from the local optimum and improve the solution.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    local_opt_tour_edges = [(local_opt_tour[i], local_opt_tour[i+1]) for i in range(len(local_opt_tour)-1)]\n    \n    longest_edge = max(local_opt_tour_edges, key=lambda x: edge_distance[x[0]][x[1]])\n    start_node = longest_edge[0]\n    end_node = longest_edge[1]\n    \n    noise_factor = np.random.uniform(0.1, 0.5)  # Add random noise to the edge distance\n    updated_edge_distance[start_node][end_node] += noise_factor\n    \n    return updated_edge_distance",
          "objective": 3.20118,
          "other_inf": null
     }
}