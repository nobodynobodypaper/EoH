{
     "parent1": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by incorporating a combination of the difference between the local and global optimum tours, the squared normalized edge usage, and a random noise, then sorts the nodes based on the minimum distance from the global optimum tour and maximum squared normalized edge usage to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.7 * (local_opt_tour - global_opt_tour)) + (0.3 * (edge_n_used**2 / np.max(edge_n_used**2))) + (0.1 * np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1]))\n    new_distance_matrix = distance_matrix + combined_metric\n    perturb_nodes = np.argsort(np.minimum(np.min(new_distance_matrix, axis=1), np.max(edge_n_used**2, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.11499,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by incorporating a combination of the difference between the local and global optimum tours, the square root of the edge usage, and a random noise, then sorts the nodes based on the maximum distance from the global optimum tour and minimum edge usage to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.5 * (local_opt_tour - global_opt_tour)) + (0.4 * (np.sqrt(edge_n_used) / np.max(np.sqrt(edge_n_used)))) + (0.1 * np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1]))\n    new_distance_matrix = distance_matrix + combined_metric\n    perturb_nodes = np.argsort(np.maximum(np.min(new_distance_matrix, axis=1), np.min(edge_n_used, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.0784,
          "other_inf": null
     }
}