{
     "parent1": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating the percentage change in edge usage, the absolute difference between local and global optimum tours, and a random permutation factor, then sorts the nodes based on the maximum percentage change in edge usage and the minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    percentage_change_edge_usage = np.abs((edge_n_used - np.min(edge_n_used, axis=1)) / (np.max(edge_n_used, axis=1) - np.min(edge_n_used, axis=1)))\n    absolute_difference_tours = np.abs(local_opt_tour - global_opt_tour)\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    \n    new_distance_matrix = distance_matrix + (percentage_change_edge_usage + absolute_difference_tours + 0.1 * randomness)\n    perturb_nodes = np.argsort(np.maximum(np.max(percentage_change_edge_usage, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.47729,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by incorporating the percentage change in edge usage, the absolute difference between local and global optimum tours, and a random permutation factor, then sorts the nodes based on the minimum distance from the global optimum tour and the maximum percentage change in edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    percentage_change_edge_usage = np.abs((edge_n_used - np.min(edge_n_used, axis=1)) / (np.max(edge_n_used, axis=1) - np.min(edge_n_used, axis=1)))\n    absolute_difference_tours = np.abs(local_opt_tour - global_opt_tour)\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    \n    new_distance_matrix = distance_matrix + (percentage_change_edge_usage + absolute_difference_tours + 0.1 * randomness)\n    perturb_nodes = np.argsort(np.minimum(np.min(absolute_difference_tours, axis=1), np.max(percentage_change_edge_usage, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "other_inf": null
     }
}