{
     "parent1": {
          "algorithm": "Create an algorithm that updates the distance matrix by incorporating a weighted sum of the difference between the local and global optimum tours, edge usage, and a unique heuristic function, and sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    unique_heuristic = np.arctan(distance_matrix) * np.sin(global_opt_tour) / np.cos(local_opt_tour)\n    new_distance_matrix = (0.5 * (global_opt_tour - local_opt_tour)) + (0.4 * edge_n_used) + (0.1 * unique_heuristic) + distance_matrix\n    \n    weighted_distance = 0.4 * np.min(new_distance_matrix, axis=1) + 0.6 * np.max(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.27532,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nDescription: Create an algorithm that updates the distance matrix by incorporating a weighted sum of the difference between the local and global optimum tours, edge usage, and a new unique heuristic function, and sorts the nodes based on the maximum distance from the global optimum tour and minimum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    unique_heuristic = np.exp(distance_matrix) * np.sin(global_opt_tour) / np.cos(local_opt_tour)\n    new_distance_matrix = (0.7 * (global_opt_tour - local_opt_tour)) + (0.3 * edge_n_used) + (0.2 * unique_heuristic) + distance_matrix\n    \n    weighted_distance = 0.6 * np.max(new_distance_matrix, axis=1) + 0.4 * np.min(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.24,
          "other_inf": null
     }
}