{
     "parent1": {
          "algorithm": "\nNew algorithm description: \nThe new algorithm will first identify the edges that are commonly used in both the local and global optimal tours and update the distance matrix by combining the number of times each edge is used in the tours. Then, it will calculate the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed and sort the nodes based on their potential impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_tours = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_tours[start][end] = 1\n        edges_in_tours[end][start] = 1\n    for node in range(len(global_opt_tour) - 1):\n        global_start = global_opt_tour[node]\n        global_end = global_opt_tour[node+1]\n        edges_in_tours[global_start][global_end] += 1\n        edges_in_tours[global_end][global_start] += 1\n\n    new_distance_matrix = distance_matrix + np.max(distance_matrix) * edges_in_tours\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    \n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.35,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nThe algorithm will first identify the edges that are commonly used in the local optimal tour and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by penalizing the edges based on their frequency of use and the potential impact of perturbing each node, and finally sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-penalty.sum(axis=1) + perturb_impact)[::-1]\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.333,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm description: \nThe new algorithm will first identify the edges that are commonly used in the local and global optimal tours and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by combining the number of times each edge is used in the tours and penalize the edges based on their frequency of use and the potential impact of perturbing each node, and finally sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_tours = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_tours[start][end] += 1\n        edges_in_tours[end][start] += 1\n    for node in range(len(global_opt_tour) - 1):\n        global_start = global_opt_tour[node]\n        global_end = global_opt_tour[node+1]\n        edges_in_tours[global_start][global_end] += 1\n        edges_in_tours[global_end][global_start] += 1\n\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - (distance_matrix + edges_in_tours)), axis=1) \n    penalty = np.divide(edges_in_tours, edge_n_used, out=np.zeros_like(edges_in_tours), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_nodes = np.argsort(-penalty.sum(axis=1) + perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.372,
          "first_obj": null
     }
}