{
     "parent1": {
          "algorithm": "Create an algorithm that updates the distance matrix by combining the distance from the global optimum tour and the edge usage, and then sorts the nodes based on the maximum edge usage and the minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    unique_score = global_opt_tour - local_opt_tour\n    new_distance_matrix = distance_matrix + (0.5 * edge_n_used) + unique_score\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06267,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by combining the distance from the global optimum tour, the edge usage, and the ratio of edge usage to the total distance, and then sorts the nodes based on this combined score to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    unique_score = global_opt_tour - local_opt_tour\n    edge_usage_ratio = edge_n_used / (np.sum(edge_n_used) / np.sum(distance_matrix))\n    new_distance_matrix = distance_matrix + (0.5 * edge_n_used) + unique_score + edge_usage_ratio\n    combined_score = np.max(edge_n_used, axis=1) + np.min(new_distance_matrix, axis=1) + edge_usage_ratio\n    perturb_nodes = np.argsort(combined_score)\n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "other_inf": null
     }
}