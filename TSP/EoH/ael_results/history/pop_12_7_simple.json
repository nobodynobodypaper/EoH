{
     "parent1": {
          "algorithm": "\nThe new algorithm aims to update the distance matrix by incorporating the difference between local and global optimum tours, edge usage, and a random factor, and to sort the nodes based on a combination of maximum distance from the global optimum tour and minimum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating the difference between local and global optimum tours, edge usage, and a random factor\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.4 * (local_opt_tour - global_opt_tour)) + (0.5 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of maximum distance from the global optimum tour and minimum edge usage\n    min_distance = np.min(new_distance_matrix, axis=1)\n    max_edge_usage = np.max(edge_n_used, axis=1)\n    weighted_distance = 0.6 * min_distance + 0.4 * max_edge_usage\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.11913,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nThe new algorithm aims to update the distance matrix by incorporating the difference between local and global optimum tours, edge usage, and a random factor, and to sort the nodes based on a combination of maximum distance from the global optimum tour and minimum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_global_diff, edge_usage, randomness_factor):\n    # Update the distance matrix by incorporating the difference between local and global optimum tours, edge usage, and a random factor\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.4 * local_global_diff) + (0.5 * edge_usage) + (0.1 * randomness_factor) + distance_matrix\n    \n    # Sort the nodes based on a combination of maximum distance from the global optimum tour and minimum edge usage\n    min_distance = np.min(new_distance_matrix, axis=1)\n    max_edge_usage = np.max(edge_usage, axis=1)\n    weighted_distance = 0.6 * min_distance + 0.4 * max_edge_usage\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "other_inf": null
     }
}