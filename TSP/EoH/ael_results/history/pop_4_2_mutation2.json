{
     "parent2": {
          "algorithm": "\nAlgorithm description: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by multiplying a factor to these edges. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix * (1 + edges_in_local_opt_tour)\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.625,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: \nThe new algorithm idea is to first construct a graph based on the distances and optimal tours, then find the shortest path from each node to the global optimal tour using Dijkstra's algorithm. Finally, it will calculate the potential impact of perturbing each node based on the reduction in total distance and sort them accordingly.\n\nCode:\nimport numpy as np\nimport networkx as nx\n\ndef dijkstra_shortest_path(graph, start, end):\n    path = nx.shortest_path(graph, source=start, target=end, weight='weight')\n    return sum([graph[path[i]][path[i+1]]['weight'] for i in range(len(path)-1)])\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    graph = nx.from_numpy_array(distance_matrix, create_using=nx.DiGraph)\n    perturb_impact = np.zeros(distance_matrix.shape[0])\n\n    for node in range(distance_matrix.shape[0]):\n        if node not in global_opt_tour:\n            shortest_to_global = min([dijkstra_shortest_path(graph, node, global_opt_tour[i]) for i in range(len(global_opt_tour))])\n            perturb_impact[node] = np.sum(edge_n_used[node] * (distance_matrix[node] - shortest_to_global))\n\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n    return distance_matrix * (1 + edge_n_used), perturb_nodes\n",
          "code": "import numpy as np\nimport networkx as nx\n\ndef dijkstra_shortest_path(graph, start, end):\n    path = nx.shortest_path(graph, source=start, target=end, weight='weight')\n    return sum([graph[path[i]][path[i+1]]['weight'] for i in range(len(path)-1)])\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    graph = nx.from_numpy_array(distance_matrix, create_using=nx.DiGraph)\n    perturb_impact = np.zeros(distance_matrix.shape[0])\n\n    for node in range(distance_matrix.shape[0]):\n        if node not in global_opt_tour:\n            shortest_to_global = min([dijkstra_shortest_path(graph, node, global_opt_tour[i]) for i in range(len(global_opt_tour))])\n            perturb_impact[node] = np.sum(edge_n_used[node] * (distance_matrix[node] - shortest_to_global))\n\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "first_obj": null
     }
}