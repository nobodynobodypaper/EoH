{
     "parent1": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating a combination of the normalized edge usage, the average difference between local and global optimum tours, and the randomness, and sorts the nodes based on the maximum normalized edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.6 * (edge_n_used / np.max(edge_n_used))) + (0.4 * (local_opt_tour - global_opt_tour))\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = distance_matrix + combined_metric + (0.1 * randomness)\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.03538,
          "other_inf": null
     },
     "parent2": {
          "algorithm": "Create an algorithm that updates the distance matrix by combining the distance from the global optimum tour and the edge usage, and then sorts the nodes based on the maximum edge usage and the minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    unique_score = global_opt_tour - local_opt_tour\n    new_distance_matrix = distance_matrix + (0.5 * edge_n_used) + unique_score\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06267,
          "other_inf": null
     },
     "parent3": {
          "algorithm": "Create a new algorithm that updates the distance matrix using a combination of the average edge usage, the difference between local and global optimum tours, and the standard deviation of edge usage, and then sorts the nodes based on the maximum edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    average_edge_usage = np.mean(edge_n_used, axis=1)\n    standard_deviation_edge_usage = np.std(edge_n_used, axis=1)\n    \n    new_distance_matrix = distance_matrix + (0.4 * average_edge_usage) + (0.3 * (local_opt_tour - global_opt_tour)) + (0.3 * standard_deviation_edge_usage)\n    \n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.05931,
          "other_inf": null
     },
     "parent4": {
          "algorithm": "Create an algorithm that updates the distance matrix by combining the distance from the global optimum tour and the edge usage, and then sorts the nodes based on the maximum edge usage and the minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    unique_score = global_opt_tour - local_opt_tour\n    new_distance_matrix = distance_matrix + (0.5 * edge_n_used) + unique_score\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06267,
          "other_inf": null
     },
     "parent5": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by computing a combination of the average edge usage, the difference between local and global optimum tours, and the product of the standard deviation of edge usage and a random factor, then sorts the nodes based on the maximum edge usage and minimum distance from the global optimum tour to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    average_edge_usage = np.mean(edge_n_used, axis=1)\n    product_std_dev_random = np.std(edge_n_used, axis=1) * np.random.rand(distance_matrix.shape[0])\n    \n    new_distance_matrix = distance_matrix + (0.4 * average_edge_usage) + (0.4 * (local_opt_tour - global_opt_tour)) + (0.2 * product_std_dev_random)\n    \n    max_edge_usage = np.max(edge_n_used, axis=1)\n    min_global_distance = np.min(new_distance_matrix, axis=1)\n    perturb_nodes = np.argsort(np.maximum(max_edge_usage, min_global_distance))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06132,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by incorporating a genetic algorithm approach, including the selection, crossover, and mutation operations, and sorts the nodes based on the fitness of each node in the population to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    population_size = 50\n    generations = 100\n    mutation_rate = 0.01\n    \n    # Initialize population randomly\n    population = np.random.permutation(distance_matrix.shape[0])\n    \n    for _ in range(generations):\n        # Calculate fitness of each individual in the population\n        fitness = np.zeros(population_size)\n        for i in range(population_size):\n            tour_distance = 0\n            for j in range(distance_matrix.shape[0] - 1):\n                tour_distance += distance_matrix[population[i]][population[i+1]]\n            tour_distance += distance_matrix[population[i]][population[0]]\n            fitness[i] = tour_distance\n        sorted_population = population[np.argsort(fitness)]\n        \n        # Apply selection, crossover, and mutation\n        selected_parents = sorted_population[:int(population_size*0.5)]\n        children = []\n        for i in range(0, len(selected_parents), 2):\n            parent1 = selected_parents[i]\n            parent2 = selected_parents[i+1]\n            midpoint = np.random.randint(2, distance_matrix.shape[0]-1)\n            child1 = np.concatenate((parent1[:midpoint], parent2[midpoint:]))\n            child2 = np.concatenate((parent2[:midpoint], parent1[midpoint:]))\n            children.append(child1)\n            children.append(child2)\n        \n        # Apply mutation\n        for child in children:\n            if np.random.rand() < mutation_rate:\n                swap_indices = np.random.choice(distance_matrix.shape[0], 2, replace=False)\n                child[swap_indices[0]], child[swap_indices[1]] = child[swap_indices[1]], child[swap_indices[0]]\n        \n        # Replace old population with new population\n        population = np.concatenate((selected_parents, np.array(children)))\n    \n    new_distance_matrix = np.zeros((distance_matrix.shape[0], distance_matrix.shape[1]))\n    for i in range(population_size):\n        for j in range(distance_matrix.shape[0]):\n            new_distance_matrix[j][population[i]] = distance_matrix[j][population[i]]\n    \n    perturb_nodes = population[:int(population_size*0.3)]  # Select top 30% of the population as perturb nodes\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "other_inf": null
     }
}