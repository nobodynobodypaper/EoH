{
     "parent1": {
          "algorithm": "\nNew algorithm description: Create an algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.7 * (global_opt_tour - local_opt_tour)) + (0.2 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage\n    weighted_distance = 0.7 * np.min(new_distance_matrix, axis=1) + 0.3 * np.max(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(-weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.26447,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm description: Create an algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef update_distance_matrix(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.7 * (global_opt_tour - local_opt_tour)) + (0.2 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage\n    weighted_distance = 0.7 * np.min(new_distance_matrix, axis=1) + 0.3 * np.max(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(-weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.1023,
          "other_inf": null
     }
}