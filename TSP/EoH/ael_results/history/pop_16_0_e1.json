{
     "parent1": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by incorporating a weighted sum of the difference between the local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.3 * (global_opt_tour - local_opt_tour)) + (0.6 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    weighted_distance = 0.4 * np.min(new_distance_matrix, axis=1) + 0.6 * np.max(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    perturb_nodes = np.array(perturb_nodes) # simplify the perturb_nodes to ensure consistency in type\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06548,
          "other_inf": null
     },
     "parent2": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by incorporating a weighted sum of the difference between the local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted sum of the difference between the local and global optimum tours, edge usage, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.3 * (global_opt_tour - local_opt_tour)) + (0.6 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage\n    weighted_distance = 0.4 * np.min(new_distance_matrix, axis=1) + 0.6 * np.max(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06412,
          "other_inf": null
     },
     "parent3": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by incorporating a weighted sum of the difference between the local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.3 * (global_opt_tour - local_opt_tour)) + (0.6 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    weighted_distance = 0.4 * np.min(new_distance_matrix, axis=1) + 0.6 * np.max(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    perturb_nodes = np.array(perturb_nodes) # simplify the perturb_nodes to ensure consistency in type\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06548,
          "other_inf": null
     },
     "parent4": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by incorporating a weighted sum of the difference between the local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.3 * (global_opt_tour - local_opt_tour)) + (0.6 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    weighted_distance = 0.4 * np.min(new_distance_matrix, axis=1) + 0.6 * np.max(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    perturb_nodes = np.array(perturb_nodes) # simplify the perturb_nodes to ensure consistency in type\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06548,
          "other_inf": null
     },
     "parent5": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours and edge usage, and sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours and edge usage\n    new_distance_matrix = (0.6 * (local_opt_tour - global_opt_tour)) + (0.4 * edge_n_used) + distance_matrix\n    \n    # Sort the nodes based on the minimum distance from the global optimum tour and maximum edge usage\n    perturb_nodes = np.argsort(np.maximum(np.min(new_distance_matrix, axis=1), np.max(edge_n_used, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06466,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by incorporating a sum of the difference between the local and global optimum tours, edge usage, and a random weighted value, and sorts the nodes based on the maximum distance from the global optimum tour and minimum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.4 * (global_opt_tour - local_opt_tour)) + (0.5 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    max_distance = 0.6 * np.max(new_distance_matrix, axis=1)\n    min_edge_usage = 0.4 * np.min(edge_n_used, axis=1)\n    weighted_criteria = max_distance - min_edge_usage\n    perturb_nodes = np.argsort(weighted_criteria)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.10895,
          "other_inf": null
     }
}