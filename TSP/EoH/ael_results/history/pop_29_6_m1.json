{
     "parent1": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating a combination of the exponential of the normalized edge usage, the weighted average of the difference between local and global optimum tours, and the inverse of the distance matrix, then sorts the nodes based on the minimum distance from the global optimum tour and maximum normalized edge usage to determine the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.8 * np.exp(edge_n_used / np.max(edge_n_used))) + (0.3 * (local_opt_tour - global_opt_tour)) + (0.4 * np.linalg.inv(distance_matrix))\n    new_distance_matrix = distance_matrix + combined_metric\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.1873,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by incorporating a combination of the exponential of the normalized edge usage, the absolute difference between local and global optimum tours, and the normalized inverse of the distance matrix, then sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.8 * np.exp(edge_n_used / np.max(edge_n_used))) + (0.3 * np.abs(local_opt_tour - global_opt_tour)) + (0.4 * (np.amax(distance_matrix) - distance_matrix) / np.amax(distance_matrix))\n    new_distance_matrix = distance_matrix + combined_metric\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.max(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06556,
          "other_inf": null
     }
}