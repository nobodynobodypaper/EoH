{
     "parent2": {
          "algorithm": "\nThe algorithm will first update the distance matrix based on the local_opt_tour and edge_n_used, then it will calculate the potential impact of perturbing each node on the current tour by comparing the distances of alternate paths to the global_opt_tour, and finally, it will sort the nodes based on the potential impact to find the top nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update distance matrix\n    new_distance_matrix = distance_matrix.copy()\n    for i in range(len(local_opt_tour) - 1):\n        edge = (local_opt_tour[i], local_opt_tour[i+1])\n        new_distance_matrix[edge[0]][edge[1]] += edge_n_used[edge]\n        new_distance_matrix[edge[1]][edge[0]] += edge_n_used[edge]\n    \n    # Calculate potential impact of perturbing each node\n    potential_impact = np.zeros(len(local_opt_tour))\n    for i in range(len(local_opt_tour)):\n        if i == len(local_opt_tour) - 1:\n            edge = (local_opt_tour[i], local_opt_tour[0])\n        else:\n            edge = (local_opt_tour[i], local_opt_tour[i+1])\n        potential_impact[i] = new_distance_matrix[local_opt_tour[i]][local_opt_tour[i-1]] - distance_matrix[global_opt_tour[i]][local_opt_tour[i-1]]\n    \n    # Sort nodes based on potential impact\n    perturb_nodes = np.argsort(potential_impact)[::-1]\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 1.245,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: \nThe algorithm will first identify the edges that are part of the local optimal tour and update the distance matrix by increasing the distances of these edges based on their utilization using edge_n_used. Then, it will calculate the potential impact of perturbing each node by evaluating the reduction in the total distance if that node is perturbed. Finally, it will sort the nodes based on their potential impact and return the updated distance matrix and the sorted nodes to perturb.\n\nCode:\nimport numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = edge_n_used[start][end]\n        edges_in_local_opt_tour[end][start] = edge_n_used[end][start]\n\n    new_distance_matrix = distance_matrix + edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = edge_n_used[start][end]\n        edges_in_local_opt_tour[end][start] = edge_n_used[end][start]\n\n    new_distance_matrix = distance_matrix + edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.728,
          "first_obj": null
     }
}