{
     "parent1": {
          "algorithm": "New algorithm: Update the edge distances in the edge distance matrix by considering the combination of edge count, distance, and usage, while incorporating a novel heuristic based on the edge count and usage to guide the search towards a more optimal solution.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n\n    edge_count = np.zeros_like(edge_n_used)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                updated_edge_distance[i][j] += (edge_count[i][j] + (1 / np.sqrt(max(edge_n_used[i][j], 1))) * edge_distance[i][j])\n\n    return updated_edge_distance",
          "objective": 0.04708,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix by considering the combination of edge count, distance, and usage, while incorporating a novel heuristic based on the edge usage and distance to guide the search towards a more optimal solution.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n\n    edge_count = np.zeros_like(edge_n_used)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                updated_edge_distance[i][j] += (edge_count[i][j] + (1 / max(edge_n_used[i][j], 1)) * edge_distance[i][j])\n\n    return updated_edge_distance",
          "objective": 0.04306,
          "other_inf": null
     }
}