{
     "parent1": {
          "algorithm": "\nAlgorithm description: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by adding a large value to these edges. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix + np.max(distance_matrix) * edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.358,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nIdea: The new algorithm will first identify the nodes that are commonly used in both the local and global optimal tours, and calculate the potential impact of perturbing each node based on their utilization. Then, it will update the distance matrix by penalizing the nodes and edges based on their frequency of use and potential impact of perturbing each node, and finally, it will sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    node_penalty = np.zeros(len(distance_matrix))\n    edge_penalty = np.zeros(distance_matrix.shape)\n    \n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        node_penalty[start] += edge_n_used[start][end]\n        node_penalty[end] += edge_n_used[end][start]\n        edge_penalty[start][end] += 1\n        edge_penalty[end][start] += 1\n        \n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        node_penalty[start] += edge_n_used[start][end]\n        node_penalty[end] += edge_n_used[end][start]\n        edge_penalty[start][end] += 1\n        edge_penalty[end][start] += 1\n        \n    perturb_impact = np.sum(edge_n_used * (distance_matrix - (distance_matrix + node_penalty + edge_penalty)), axis=1)\n    perturb_nodes = np.argsort(-node_penalty + perturb_impact)[::-1]\n    \n    new_distance_matrix = distance_matrix + node_penalty + edge_penalty * edge_n_used\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.634,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: The new algorithm will first identify the nodes that are underutilized based on their appearance in the local optimal tour and not being heavily used in the global optimal tour. Then, it will update the distance matrix by considering the potential impact of perturbing these underutilized nodes by calculating the reduction in total distance, and finally, it will sort the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    underutilized_nodes = np.zeros(len(distance_matrix))\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        underutilized_nodes[start] += 1\n        underutilized_nodes[end] += 1\n\n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        underutilized_nodes[start] -= 1\n        underutilized_nodes[end] -= 1\n\n    potential_impact = np.sum(edge_n_used * (distance_matrix - (distance_matrix - (1/underutilized_nodes))), axis=1)\n    perturb_nodes = np.argsort(potential_impact)[::-1]\n\n    new_distance_matrix = distance_matrix - (1/underutilized_nodes)\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.301,
          "first_obj": null
     }
}