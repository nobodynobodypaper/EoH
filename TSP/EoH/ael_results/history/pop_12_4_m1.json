{
     "parent1": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix using a combination of the average edge usage, the difference between local and global optimum tours, and the maximum edge usage, and then sorts the nodes based on the maximum edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    average_edge_usage = np.mean(edge_n_used, axis=1)\n    max_edge_usage = np.max(edge_n_used, axis=1)\n    \n    new_distance_matrix = distance_matrix + (0.4 * average_edge_usage) + (0.3 * (local_opt_tour - global_opt_tour)) + (0.3 * max_edge_usage)\n    \n    perturb_nodes = np.argsort(np.maximum(max_edge_usage, np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.20537,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix using a combination of the average edge usage, the difference between local and global optimum tours, and the maximum edge usage, and then sorts the nodes based on the maximum edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation, with weights 0.5, 0.25, and 0.25 respectively.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    average_edge_usage = np.mean(edge_n_used, axis=1)\n    max_edge_usage = np.max(edge_n_used, axis=1)\n    \n    new_distance_matrix = distance_matrix + (0.5 * average_edge_usage) + (0.25 * (local_opt_tour - global_opt_tour)) + (0.25 * max_edge_usage)\n    \n    perturb_nodes = np.argsort(np.maximum(max_edge_usage, np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.19691,
          "other_inf": null
     }
}