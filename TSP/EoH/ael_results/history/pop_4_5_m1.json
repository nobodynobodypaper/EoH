{
     "parent1": {
          "algorithm": "New algorithm: Update the edge distances in the edge distance matrix based on the frequency of each edge used in the local optimal tour using a noise factor that depends on the edge count and the edge distance to guide the search towards a better solution with a bias towards lesser used edges and longer distances.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_distance)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                noise_factor = np.random.uniform(-1 / edge_count[i][j], 1 / edge_count[i][j]) + (edge_distance[i][j] / np.max(edge_distance))\n                updated_edge_distance[i][j] += noise_factor\n\n    return updated_edge_distance",
          "objective": 0.0905,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix based on the frequency of each edge used in the local optimal tour using a penalty factor that depends on the edge count and the edge distance to guide the search towards a better solution with a bias towards lesser used edges and longer distances, and also incorporate a parameter to control the impact of the penalty factor on the edge distance update.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used, penalty_factor):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_distance)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                penalty = penalty_factor * (1 / edge_count[i][j]) * edge_distance[i][j]\n                updated_edge_distance[i][j] += penalty\n\n    return updated_edge_distance",
          "objective": 10000000000.0,
          "other_inf": null
     }
}