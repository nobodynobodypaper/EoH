{
     "parent1": {
          "algorithm": "Create an algorithm that updates the distance matrix by incorporating a weighted sum of the difference between local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum edge usage and maximum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted sum of the difference between local and global optimum tours, edge usage, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.4 * (local_opt_tour - global_opt_tour)) + (0.6 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of minimum edge usage and maximum distance from the global optimum tour\n    weighted_distance = 0.6 * np.max(new_distance_matrix, axis=1) + 0.4 * np.min(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.11968,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by incorporating a weighted sum of the difference between local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum edge usage and maximum distance from the global optimum tour to identify the top nodes for perturbation. The algorithm should incorporate a higher weight for randomness and edge usage while still considering the difference between local and global optimum tours in the updated distance matrix. The sorting of nodes should prioritize nodes with higher edge usage and larger distance from the global optimum tour to avoid local optimum.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted sum of the difference between local and global optimum tours, edge usage, and increased weight for randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.3 * (local_opt_tour - global_opt_tour)) + (0.6 * edge_n_used) + (0.2 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of increased weight for edge usage and maximum distance from the global optimum tour\n    weighted_distance = 0.7 * np.max(new_distance_matrix, axis=1) + 0.5 * np.min(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(-weighted_distance)  # Sort in descending order\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.21548,
          "other_inf": null
     }
}