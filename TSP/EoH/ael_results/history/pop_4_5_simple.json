{
     "parent1": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by taking the element-wise minimum between the distance matrix and a randomized matrix, incorporates the difference between the local and global optimum tour by subtracting it from the distance matrix, and sorts the nodes based on the sum of edge usage and the distance matrix to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by taking the element-wise minimum between the distance matrix and a randomized matrix\n    new_distance_matrix = np.minimum(distance_matrix, np.random.rand(*distance_matrix.shape))\n    \n    # Incorporate the difference between local and global optimum tours by subtracting it from the distance matrix\n    new_distance_matrix -= local_opt_tour - global_opt_tour\n    \n    # Sort the nodes based on the sum of edge usage and the distance matrix\n    perturb_nodes = np.argsort(np.sum(new_distance_matrix + edge_n_used, axis=1))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.16353,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by taking the element-wise minimum between the distance matrix and a randomized matrix, incorporates the difference between the local and global optimum tour by subtracting it from the distance matrix, and sorts the nodes based on the sum of edge usage and the distance matrix to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    new_distance_matrix = np.minimum(distance_matrix, np.random.rand(*distance_matrix.shape))\n    \n    new_distance_matrix -= local_opt_tour - global_opt_tour\n    \n    perturb_nodes = np.argsort(np.sum(new_distance_matrix, axis=1))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.10009,
          "other_inf": null
     }
}