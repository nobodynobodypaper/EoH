{
     "parent1": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by incorporating the cosine similarity between edge usage and the difference between the local and global optimum tours, and sorts the nodes based on the minimum cosine similarity and minimum distance from the global optimum tour to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    cosine_similarity = np.dot(edge_n_used, edge_n_used.T) / (np.linalg.norm(edge_n_used) * np.linalg.norm(edge_n_used.T))\n    combined_metric = np.cos(np.abs(local_opt_tour - global_opt_tour)) + 1 - cosine_similarity\n    new_distance_matrix = distance_matrix + combined_metric\n    perturb_nodes = np.argsort(np.minimum(np.min(cosine_similarity, axis=1), np.min(new_distance_matrix, axis=1)))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 3.40313,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: \nCreate an algorithm that updates the distance matrix by incorporating the weighted average of the cosine similarity between edge usage and the difference between the local and global optimum tours, and sorts the nodes based on a weighted combination of the minimum cosine similarity and minimum distance from the global optimum tour to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    cosine_similarity = np.dot(edge_n_used, edge_n_used.T) / (np.linalg.norm(edge_n_used) * np.linalg.norm(edge_n_used.T))\n    combined_metric = 0.7 * np.cos(np.abs(local_opt_tour - global_opt_tour)) + 0.3 * (1 - cosine_similarity)\n    new_distance_matrix = distance_matrix + combined_metric\n    perturb_nodes = np.argsort(0.6 * np.minimum(np.min(cosine_similarity, axis=1), 0.4 * np.min(new_distance_matrix, axis=1)))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 3.44697,
          "other_inf": null
     }
}