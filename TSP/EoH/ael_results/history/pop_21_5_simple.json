{
     "parent1": {
          "algorithm": "Create a new algorithm that updates the distance matrix by considering the weighted sum of normalized edge usage, the difference between the local and global optimum tours, and randomness, and sorts the nodes based on the combination of edge usage and distance from the global optimum tour.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.6 * (edge_n_used / np.max(edge_n_used))) + (0.4 * (local_opt_tour - global_opt_tour))\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = distance_matrix + combined_metric + (0.1 * randomness)\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.05739,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "Create a new algorithm that updates the distance matrix by considering the weighted sum of normalized edge usage, the difference between the local and global optimum tours, and randomness, and sorts the nodes based on the combination of edge usage and distance from the global optimum tour.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edge_n_used_normalized = edge_n_used / np.max(edge_n_used)\n    combined_metric = (0.6 * edge_n_used_normalized) + (0.4 * (local_opt_tour - global_opt_tour))\n    randomness = np.random.rand(*distance_matrix.shape)\n    perturbation = 0.1 * randomness\n    new_distance_matrix = distance_matrix + combined_metric + perturbation\n    perturb_nodes = np.argsort(\n        np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1))\n    )\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.07827,
          "other_inf": null
     }
}