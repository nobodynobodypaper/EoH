{
     "parent1": {
          "algorithm": "\nThe algorithm idea is to identify edges that are commonly used in the local optimal tour and update the distance matrix by penalizing these edges based on their frequency of use. Then, sort the nodes based on the penalty to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_nodes = np.argsort(-penalty.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.474,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nAlgorithm description: \nThe new algorithm will first identify the edges that are part of the local optimal tour and update the distance matrix by increasing the distances of these edges based on their utilization using edge_n_used. Then, it will calculate the potential impact of perturbing each node by evaluating the reduction in the total distance if that node is perturbed. Finally, it will sort the nodes based on their potential impact and return the updated distance matrix and the sorted nodes to perturb, prioritizing nodes from the local optimal tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = edge_n_used[start][end]\n        edges_in_local_opt_tour[end][start] = edge_n_used[end][start]\n\n    new_distance_matrix = distance_matrix + edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    \n    # Prioritize nodes from the local optimal tour\n    perturb_nodes = []\n    for node in local_opt_tour:\n        perturb_nodes.append((node, perturb_impact[node]))\n    perturb_nodes.sort(key=lambda x: x[1], reverse=True)\n    perturb_nodes = np.array([node[0] for node in perturb_nodes])\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.731,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nThe new algorithm idea is to identify the edges that are highly utilized in the tour and update the distance matrix by increasing the distances of these edges based on their utilization. Then, calculate the potential impact of perturbing each node by evaluating the reduction in the total distance if that node is perturbed. Finally, sort the nodes based on their potential impact and return the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_utilization = np.divide(edge_n_used, np.max(edge_n_used), out=np.zeros_like(edge_n_used), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + edges_utilization\n    perturb_impact = np.sum(edges_utilization * (distance_matrix - new_distance_matrix), axis=1)\n\n    # Sort nodes based on perturb impact\n    perturb_nodes = np.argsort(-perturb_impact)\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.858,
          "first_obj": null
     }
}