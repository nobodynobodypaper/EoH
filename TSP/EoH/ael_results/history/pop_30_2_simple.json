{
     "parent1": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating the minimum of the logarithm of the normalized edge usage, the absolute difference between the local and global optimum tours, and a weighted random factor, then sorts the nodes based on the maximum edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    min_combined_metric = (0.3 * np.minimum(np.log(edge_n_used / np.max(edge_n_used)), np.abs(local_opt_tour - global_opt_tour))) + (0.7 * np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1]))\n    new_distance_matrix = distance_matrix + min_combined_metric\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.08291,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating the minimum of the logarithm of the normalized edge usage, the absolute difference between the local and global optimum tours, and a weighted random factor, then sorts the nodes based on the maximum edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    min_combined_metric = (0.3 * np.minimum(np.log(edge_n_used / np.max(edge_n_used)), np.abs(local_opt_tour - global_opt_tour))) + (0.7 * np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1]))\n    new_distance_matrix = distance_matrix + min_combined_metric\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.04186,
          "other_inf": null
     }
}