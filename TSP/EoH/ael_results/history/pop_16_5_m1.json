{
     "parent1": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours and edge usage, and sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours and edge usage\n    new_distance_matrix = (0.6 * (local_opt_tour - global_opt_tour)) + (0.4 * edge_n_used) + distance_matrix\n    \n    # Sort the nodes based on the minimum distance from the global optimum tour and maximum edge usage\n    perturb_nodes = np.argsort(np.maximum(np.min(new_distance_matrix, axis=1), np.max(edge_n_used, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06466,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm to update the distance matrix and sort the top nodes for perturbation by incorporating the difference between local and global optimum tours, edge usage, and edge distance.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating the difference between local and global optimum tours, edge usage, and edge distance\n    edge_distance = np.ones_like(distance_matrix)\n    for i in range(len(distance_matrix)):\n        for j in range(len(distance_matrix)):\n            edge_distance[i][j] = np.abs(local_opt_tour[i] - global_opt_tour[j])\n\n    new_distance_matrix = 0.6 * (local_opt_tour - global_opt_tour) + 0.3 * edge_n_used + 0.1 * edge_distance + distance_matrix\n    \n    # Sort the nodes based on the minimum distance from the global optimum tour and maximum edge usage\n    perturb_nodes = np.argsort(np.maximum(np.min(new_distance_matrix, axis=1), np.max(edge_n_used, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "other_inf": null
     }
}