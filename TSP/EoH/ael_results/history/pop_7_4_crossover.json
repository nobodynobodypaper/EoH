{
     "parent1": {
          "algorithm": "\nAlgorithm description: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by multiplying a factor to these edges. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix * (1 + edges_in_local_opt_tour)\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.625,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nThe algorithm idea is to identify edges that are commonly used in the local optimal tour and update the distance matrix by penalizing these edges based on their frequency of use. Then, sort the nodes based on the penalty to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_nodes = np.argsort(-penalty.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.474,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: \nThe algorithm first identifies the nodes that are part of the local optimal tour but are not included in the global optimal tour. Then, it updates the distance matrix by increasing the distance of these nodes' connections and decreasing the distance of the connections that lead to nodes in the global optimal tour. Finally, it sorts the nodes based on the impact of these updates and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    nodes_in_local_opt_not_global = np.setdiff1d(local_opt_tour, global_opt_tour)\n    connections_to_global = np.isin(local_opt_tour, global_opt_tour)\n    penalty_increase = 1.5\n    penalty_decrease = 0.5\n\n    updated_distance_matrix = distance_matrix.copy()\n    for node in nodes_in_local_opt_not_global:\n        updated_distance_matrix[node, :] *= penalty_increase\n        updated_distance_matrix[:, node] *= penalty_increase\n    for connection in np.where(connections_to_global)[0]:\n        updated_distance_matrix[local_opt_tour[connection], local_opt_tour[connection + 1]] *= penalty_decrease\n        updated_distance_matrix[local_opt_tour[connection + 1], local_opt_tour[connection]] *= penalty_decrease\n\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - updated_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "first_obj": null
     }
}