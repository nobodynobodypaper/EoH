{
     "parent1": {
          "algorithm": "\nAlgorithm description: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by adding a specific value to the distances of these edges. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix + 10 * edges_in_local_opt_tour  # Updated to adding a specific value    \n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.384,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: The new algorithm will analyze the distribution of distances between nodes and update the distance matrix by considering the fluctuation in the distances between nodes. It will then sort the nodes based on the fluctuation to identify the top nodes to perturb in order to escape the local optimum tour and find a minimized total distance tour.\n\nCode:\nimport numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    distance_fluctuation = np.std(distance_matrix, axis=1)\n    new_distance_matrix = distance_matrix - np.outer(distance_fluctuation, np.ones(distance_matrix.shape[0]))\n    perturb_nodes = np.argsort(distance_fluctuation)[::-1]\n    return new_distance_matrix, perturb_nodes\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    distance_fluctuation = np.std(distance_matrix, axis=1)\n    new_distance_matrix = distance_matrix - np.outer(distance_fluctuation, np.ones(distance_matrix.shape[0]))\n    perturb_nodes = np.argsort(distance_fluctuation)[::-1]\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.141,
          "first_obj": null
     }
}