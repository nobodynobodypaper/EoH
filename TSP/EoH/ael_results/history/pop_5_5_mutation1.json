{
     "parent1": {
          "algorithm": "\nIdea: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by adding a factor to these edges rather than multiplying. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix + edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.371,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nIdea: The algorithm identifies the nodes that are part of the local optimal tour, calculates the impact of perturbing each node based on their connectivity and their distance from other nodes, and updates the distance matrix. Then, it sorts the nodes based on their potential impact to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    node_connectivity = np.zeros(distance_matrix.shape[0])\n    for i in range(len(local_opt_tour)):\n        for j in range(len(local_opt_tour)):\n            if i != j:\n                node_connectivity[local_opt_tour[i]] += distance_matrix[local_opt_tour[i], local_opt_tour[j]]\n\n    perturb_impact = node_connectivity / (1 + distance_matrix.sum(axis=1))\n    perturb_nodes = np.argsort(-perturb_impact)\n\n    new_distance_matrix = distance_matrix + perturb_impact * edge_n_used\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 1.739,
          "first_obj": null
     }
}