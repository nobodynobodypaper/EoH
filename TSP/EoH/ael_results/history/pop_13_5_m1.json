{
     "parent1": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours and edge usage, and sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours and edge usage\n    new_distance_matrix = (0.6 * (local_opt_tour - global_opt_tour)) + (0.4 * edge_n_used) + distance_matrix\n    \n    # Sort the nodes based on the minimum distance from the global optimum tour and maximum edge usage\n    perturb_nodes = np.argsort(np.maximum(np.min(new_distance_matrix, axis=1), np.max(edge_n_used, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06466,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm description: Create a new algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and node attractiveness, and sorts the nodes based on the maximum node attractiveness and minimum distance from the global optimum tour to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used, node_attractiveness):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and node attractiveness\n    new_distance_matrix = (0.5 * (local_opt_tour - global_opt_tour)) + (0.3 * edge_n_used) + (0.2 * node_attractiveness) + distance_matrix\n    \n    # Sort the nodes based on the maximum node attractiveness and minimum distance from the global optimum tour\n    perturb_nodes = np.argsort(-np.maximum(node_attractiveness, np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "other_inf": null
     }
}