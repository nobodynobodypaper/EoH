{
     "parent1": {
          "algorithm": "Create a new algorithm that updates the distance matrix by combining the weighted average of edge usage, the difference between local and global optimum tours, and randomness, and then sorts the nodes based on the maximum edge usage and the minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by combining the weighted average of edge usage, the difference between local and global optimum tours, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.4 * edge_n_used) + (0.4 * (local_opt_tour - global_opt_tour)) + (0.2 * randomness) + distance_matrix\n    \n    # Sort the nodes based on the maximum edge usage and the minimum distance from the global optimum tour\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06425,
          "other_inf": null
     },
     "parent2": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by incorporating a weighted sum of the difference between the local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.3 * (global_opt_tour - local_opt_tour)) + (0.6 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    weighted_distance = 0.4 * np.min(new_distance_matrix, axis=1) + 0.6 * np.max(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    perturb_nodes = np.array(perturb_nodes) # simplify the perturb_nodes to ensure consistency in type\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06548,
          "other_inf": null
     },
     "parent3": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by incorporating a weighted sum of the difference between the local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted sum of the difference between the local and global optimum tours, edge usage, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.3 * (global_opt_tour - local_opt_tour)) + (0.6 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage\n    weighted_distance = 0.4 * np.min(new_distance_matrix, axis=1) + 0.6 * np.max(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06412,
          "other_inf": null
     },
     "parent4": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating a combination of the normalized edge usage, the average difference between local and global optimum tours, and the randomness, and sorts the nodes based on the maximum normalized edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.6 * (edge_n_used / np.max(edge_n_used))) + (0.4 * (local_opt_tour - global_opt_tour))\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = distance_matrix + combined_metric + (0.1 * randomness)\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.03538,
          "other_inf": null
     },
     "parent5": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by incorporating a combination of edge usage, the difference between local and global optimum tours, and a random factor, then sorts the nodes based on the maximum edge usage and the minimum distance from the global optimum tour to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    random_factor = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    update_factor = (0.4 * edge_n_used) + (0.4 * (local_opt_tour - global_opt_tour)) + (0.2 * random_factor)\n    new_distance_matrix = update_factor + distance_matrix\n    \n    max_edge_n_used = np.max(edge_n_used, axis=1)\n    min_new_distance_matrix = np.min(new_distance_matrix, axis=1)\n    perturb_nodes = np.argsort(np.maximum(max_edge_n_used, min_new_distance_matrix))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06227,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by incorporating the difference between the local and global optimum tours, edge usage, and a combination of random factors, and then sorts the nodes based on a weighted sum of edge usage and the minimum distance from the global optimum tour to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating the difference between the local and global optimum tours, edge usage, and a combination of random factors\n    random_factors = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    update_factor = (0.4 * (local_opt_tour - global_opt_tour)) + (0.5 * edge_n_used) + (0.1 * random_factors)\n    new_distance_matrix = update_factor + distance_matrix\n    \n    # Sort the nodes based on a weighted sum of edge usage and the minimum distance from the global optimum tour\n    weighted_perturb_nodes = 0.6 * np.max(edge_n_used, axis=1) + 0.4 * np.min(new_distance_matrix, axis=1)\n    perturb_nodes = np.argsort(weighted_perturb_nodes)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.09556,
          "other_inf": null
     }
}