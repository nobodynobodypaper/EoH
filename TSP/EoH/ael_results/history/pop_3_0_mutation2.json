{
     "parent2": {
          "algorithm": "\nThe algorithm idea is to identify edges that are commonly used in the local optimal tour and update the distance matrix by penalizing these edges based on their frequency of use. Then, sort the nodes based on the penalty to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_nodes = np.argsort(-penalty.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.474,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: The algorithm first identifies the edges that are commonly used in the local optimal tour and updates the distance matrix by perturbing these edges based on their frequency of use. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    common_edges = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        common_edges[start][end] += 1\n        common_edges[end][start] += 1\n    \n    perturb_impact = np.sum(edge_n_used * (distance_matrix - (distance_matrix + common_edges * edge_n_used)), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n    \n    new_distance_matrix = distance_matrix + common_edges * edge_n_used\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.728,
          "first_obj": null
     }
}