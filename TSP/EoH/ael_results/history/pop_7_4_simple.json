{
     "parent1": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix by incorporating a penalty factor for overused edges and adjusting the noise factor based on the edge count and distance to guide the search towards a better solution using a modified scoring function.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_count = np.zeros_like(edge_distance)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n    \n    mean_edge_distance = np.mean(edge_distance)\n    max_edge_usage = np.max(edge_n_used)\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                penalty_factor = 0.1 * edge_n_used[i][j] / max_edge_usage\n                noise_factor = 0.5 * np.random.uniform() * (1 / edge_count[i][j]) + 0.5 * (edge_distance[i][j] / mean_edge_distance) - penalty_factor\n                updated_edge_distance[i][j] += noise_factor * (1 + edge_count[i][j])\n\n    return updated_edge_distance",
          "objective": 0.05906,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix by incorporating a penalty factor for overused edges and adjusting the noise factor based on the edge count and distance to guide the search towards a better solution using a modified scoring function.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_count = np.zeros_like(edge_distance)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n    \n    mean_edge_distance = np.mean(edge_distance)\n    max_edge_usage = np.max(edge_n_used)\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                penalty_factor = 0.1 * edge_n_used[i][j] / max_edge_usage\n                noise_factor = 0.5 * np.random.uniform() - penalty_factor\n                updated_edge_distance[i][j] += noise_factor \n                updated_edge_distance[i][j] += 0.5 * (edge_distance[i][j] / mean_edge_distance)\n    \n    return updated_edge_distance",
          "objective": 0.02444,
          "other_inf": null
     }
}