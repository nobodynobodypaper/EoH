{
     "parent1": {
          "algorithm": "\nIdea: The algorithm will first update the distance matrix based on the local optimal tour, global optimal tour, and the number of times each edge is used. Then, it will sort the nodes based on a weighted combination of the distance to the closest neighbor and the number of times each node is visited in the tour to provide the top nodes to perturb to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update distance matrix\n    new_distance_matrix = distance_matrix * (1 + edge_n_used)\n    \n    # Calculate weighted combination of distance to closest neighbor and number of times each node is visited in the tour\n    weighted_distance = np.min(new_distance_matrix, axis=1)\n    node_visits = np.bincount(local_opt_tour, minlength=len(distance_matrix))\n    weighted_combination = weighted_distance + (0.1 * node_visits)\n    \n    # Sort nodes based on the weighted combination\n    perturb_nodes = np.argsort(weighted_combination)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 1.377,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nThe algorithm idea is to update the distance matrix by penalizing edges frequently used in the local optimal tour, then sort the nodes based on the penalty to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour. \n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used!=0)\n    new_distance_matrix = distance_matrix + penalty\n    perturb_nodes = np.argsort(-penalty.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 1.159,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description:\nIdea: The algorithm will update the distance matrix by penalizing edges frequently used in the global optimal tour, calculate the total distance to the closest neighbor for each node, and sort the nodes based on a weighted combination of the penalty and the total distance to provide the top nodes to perturb.\n\nCode:\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used!=0)\n    \n    weighted_distance = np.min(distance_matrix, axis=1)\n    \n    weighted_combination = (0.7 * penalty.sum(axis=1)) + (0.3 * weighted_distance)\n    \n    perturb_nodes = np.argsort(weighted_combination)\n    \n    new_distance_matrix = distance_matrix + penalty\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 1.741,
          "first_obj": null
     }
}