{
     "parent1": {
          "algorithm": "New algorithm: Update the edge distances in the edge distance matrix based on the frequency of each edge used in the local optimal tour using a noise factor that depends on a custom combination of edge count and distance to guide the search towards a better solution.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_distance)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                noise_factor = np.random.uniform(-0.5, 0.5) * edge_count[i][j] + (1 / max(edge_n_used[i][j], 1)) * (edge_distance[i][j] / np.max(edge_distance))\n                updated_edge_distance[i][j] += noise_factor\n\n    return updated_edge_distance",
          "objective": 0.02634,
          "other_inf": null
     },
     "parent2": {
          "algorithm": "New algorithm: The strategy is to update the edge distances in the edge distance matrix based on the frequency of each edge used in the local optimal tour using a noise factor that depends on the square root of the edge count and the logarithm of the edge count to guide the search towards a better solution in a balanced manner.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_distance)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                noise_factor = np.random.uniform(-0.5 / np.sqrt(edge_count[i][j]), 0.5 / np.log(edge_count[i][j] + 1))\n                updated_edge_distance[i][j] += noise_factor\n\n    return updated_edge_distance",
          "objective": 0.08747,
          "other_inf": null
     },
     "parent3": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix by considering the edge count, edge distance, and the reciprocal of edge usage, and using a unique heuristic that involves scaling the edge count and distance based on their relative magnitude, and then combining them with the reciprocal of edge usage to update the edge distances.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_n_used)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                scale_factor = 10 / (edge_count[i][j] * edge_distance[i][j])  # Unique scaling factor\n                updated_edge_distance[i][j] += scale_factor * (edge_count[i][j] + edge_distance[i][j]) * (1 / max(edge_n_used[i][j], 1))\n\n    return updated_edge_distance",
          "objective": 0.07724,
          "other_inf": null
     },
     "parent4": {
          "algorithm": "New algorithm: Update the edge distances in the edge distance matrix based on the frequency of each edge used in the local optimal tour using a noise factor that depends on the reciprocal of the square root of the edge count and the edge distance to guide the search towards a better solution with a balanced bias towards lesser used edges and longer distances.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_distance)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                noise_factor = np.random.uniform(-1 / np.sqrt(edge_count[i][j]), 1 / np.sqrt(edge_count[i][j])) + (edge_distance[i][j] / np.max(edge_distance))\n                updated_edge_distance[i][j] += noise_factor\n\n    return updated_edge_distance",
          "objective": 0.08263,
          "other_inf": null
     },
     "parent5": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix by considering the edge count, edge distance, and the reciprocal of edge usage, and using a unique heuristic that involves scaling the edge count and distance based on their relative magnitude, and then combining them with the reciprocal of edge usage to update the edge distances.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_n_used)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                scale_factor = 10 / (edge_count[i][j] * edge_distance[i][j])  # Unique scaling factor\n                updated_edge_distance[i][j] += scale_factor * (edge_count[i][j] + edge_distance[i][j]) * (1 / max(edge_n_used[i][j], 1))\n\n    return updated_edge_distance",
          "objective": 0.07724,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "New algorithm: Update the edge distances in the edge distance matrix by considering the edge count, edge distance, and the reciprocal of edge usage, and using a unique heuristic that involves a non-linear combination of edge count, distance, and usage to update the edge distances.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_n_used)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                non_linear_combination = (edge_count[i][j] ** 2) * np.sqrt(edge_distance[i][j]) / (edge_n_used[i][j] + 1)\n                updated_edge_distance[i][j] += non_linear_combination\n\n    return updated_edge_distance",
          "objective": 0.6285,
          "other_inf": null
     }
}