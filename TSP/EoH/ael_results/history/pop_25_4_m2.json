{
     "parent1": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by calculating the weighted sum of the difference between the local and global optimum tours, the product of the average edge usage and a random factor, and the inverse of the distance matrix, then sort the nodes based on the minimum distance from the global optimum tour and maximum edge usage to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference = (local_opt_tour - global_opt_tour)\n    average_edge_usage = np.mean(edge_n_used, axis=1)\n    \n    weighted_factor = 0.5 # Example value, can be adjusted based on performance\n    \n    inverse_distance_matrix = 1 / (distance_matrix + 1) # Adding 1 to avoid division by zero\n    \n    new_distance_matrix = distance_matrix + (tour_difference + average_edge_usage * np.random.rand(distance_matrix.shape[0]) + inverse_distance_matrix) * weighted_factor\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.03728,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "Create a new algorithm that updates the distance matrix by calculating the product of the local and global optimum tours, the sum of the average edge usage and a random factor, and the square root of the distance matrix, then sort the nodes based on the maximum distance from the global optimum tour and minimum edge usage to determine the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_product = (local_opt_tour * global_opt_tour)\n    average_edge_usage = np.sum(edge_n_used, axis=1)\n    \n    random_factor = np.random.rand(distance_matrix.shape[0])\n    \n    new_distance_matrix = (tour_product + average_edge_usage * random_factor + np.sqrt(distance_matrix))\n    perturb_nodes = np.argsort(np.maximum(np.min(edge_n_used, axis=1), np.max(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.30983,
          "other_inf": null
     }
}