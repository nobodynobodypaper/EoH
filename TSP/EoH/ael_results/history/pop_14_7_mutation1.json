{
     "parent1": {
          "algorithm": "\nIdea: The new algorithm will identify the nodes that are frequently used in both the local and global optimal tour and calculate the potential impact of perturbing each node. Then, it will update the distance matrix by penalizing the nodes based on their frequency of use and the potential impact of perturbing each node. Finally, it will sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    freq_penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        freq_penalty[start][end] += 1\n        freq_penalty[end][start] += 1\n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        freq_penalty[start][end] += 1\n        freq_penalty[end][start] += 1\n    freq_penalty = np.divide(freq_penalty, edge_n_used, out=np.zeros_like(freq_penalty), where=edge_n_used != 0)\n    \n    perturb_impact = np.sum(edge_n_used * (distance_matrix - (distance_matrix + freq_penalty * edge_n_used)), axis=1)\n    perturb_nodes = np.argsort(-freq_penalty.sum(axis=1) + perturb_impact)[::-1]\n    \n    new_distance_matrix = distance_matrix + freq_penalty * edge_n_used\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.376,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nIdea: The new algorithm will identify the nodes that are located at the intersections of most frequently used edges in both the local and global optimal tours, and calculate the potential impact of perturbing each node based on the usage of these edges. It will then update the distance matrix by adjusting the distances of the nodes proportional to their usage and the potential impact of perturbing each node, and sort the nodes based on the penalty and perturb impact to prioritize nodes that will lead to minimized total distance.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    nodes_usage = np.zeros(distance_matrix.shape[0])\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        nodes_usage[start] += 1\n        nodes_usage[end] += 1\n    \n    intersection_impact = np.sum((1 / (nodes_usage + 1)) * (distance_matrix - distance_matrix / (nodes_usage + 1)), axis=1)\n    penalty = np.divide(nodes_usage, (edge_n_used + 1), out=np.zeros_like(nodes_usage), where=(edge_n_used + 1) != 0)\n    new_distance_matrix = distance_matrix + penalty * (edge_n_used + 1)\n    \n    perturb_nodes = np.argsort(-penalty + intersection_impact)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "first_obj": null
     }
}