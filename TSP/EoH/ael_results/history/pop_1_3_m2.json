{
     "parent1": {
          "algorithm": "\nThe new algorithm will update the edge distance matrix by identifying the edges involved in the local optimal tour and increasing their distances to discourage their usage, while decreasing the distances of non-participating edges to encourage their selection in the next iteration.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = edge_distance.copy()\n    for i in range(len(local_opt_tour)-1):\n        start_node = local_opt_tour[i]\n        end_node = local_opt_tour[i+1]\n        updated_edge_distance[start_node, end_node] *= 1.1  # Increase distance of edges in local optimal tour\n        updated_edge_distance[end_node, start_node] *= 1.1  # Increase distance of edges in local optimal tour\n    for i in range(len(edge_distance)):\n        for j in range(len(edge_distance[0])):\n            if edge_n_used[i, j] == 0:\n                updated_edge_distance[i, j] *= 0.9  # Decrease distance of non-participating edges\n    return updated_edge_distance",
          "objective": 3.45938,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "The new algorithm will update the edge distance matrix by identifying the edges involved in the local optimal tour and increasing their distances to discourage their usage, while decreasing the distances of non-participating edges to encourage their selection in the next iteration.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = edge_distance.copy()\n    for i in range(len(local_opt_tour)-1):\n        start_node = local_opt_tour[i]\n        end_node = local_opt_tour[i+1]\n        updated_edge_distance[start_node, end_node] *= 1.2  # Increase distance of edges in local optimal tour\n        updated_edge_distance[end_node, start_node] *= 1.2  # Increase distance of edges in local optimal tour\n    for i in range(len(edge_distance)):\n        for j in range(len(edge_distance[0])):\n            if edge_n_used[i, j] < len(local_opt_tour):\n                updated_edge_distance[i, j] *= 0.8  # Decrease distance of edges used in the local optimal tour\n            else:\n                updated_edge_distance[i, j] *= 0.9  # Decrease distance of non-participating edges\n    return updated_edge_distance",
          "objective": 3.43561,
          "other_inf": null
     }
}