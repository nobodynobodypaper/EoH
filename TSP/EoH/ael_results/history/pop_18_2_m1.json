{
     "parent1": {
          "algorithm": "Create an algorithm that updates the distance matrix by incorporating a weighted combination of edge usage and the difference between local and global optimum tours, and then sorts the nodes based on the weighted combination of maximum edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    weighted_combination = (0.4 * edge_n_used) + (0.6 * (local_opt_tour - global_opt_tour))\n    \n    new_distance_matrix = distance_matrix + weighted_combination\n    \n    perturb_nodes = np.argsort((0.6 * np.max(edge_n_used, axis=1)) + (0.4 * np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06466,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by incorporating a weighted combination of edge usage and the difference between local and global optimum tours, and then sorts the nodes based on the weighted combination of minimum edge usage and maximum distance from the global optimum tour to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    weighted_combination = (0.6 * edge_n_used) + (0.4 * (global_opt_tour - local_opt_tour))\n    \n    new_distance_matrix = distance_matrix + weighted_combination\n    \n    perturb_nodes = np.argsort((0.4 * np.min(edge_n_used, axis=1)) + (0.6 * np.max(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.14572,
          "other_inf": null
     }
}