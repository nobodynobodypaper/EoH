{
     "parent1": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by multiplying the sum of the difference between the local and global optimum tours and the product of the average edge usage and a random factor by a different weighted factor, then sorts the nodes based on the maximum distance from the global optimum tour and maximum edge usage to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference = (local_opt_tour - global_opt_tour)\n    average_edge_usage = np.mean(edge_n_used, axis=1)\n    \n    weighted_factor = 0.3 # New parameter setting\n    \n    new_distance_matrix = distance_matrix + (tour_difference + average_edge_usage * np.random.rand(distance_matrix.shape[0])) * weighted_factor\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.max(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.12975,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by multiplying the sum of the difference between the local and global optimum tours and the product of the average edge usage and a random factor by a different weighted factor, then sorts the nodes based on the maximum distance from the global optimum tour and maximum edge usage to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference = (local_opt_tour - global_opt_tour)\n    average_edge_usage = np.mean(edge_n_used, axis=1)\n    \n    weighted_factor = 0.1  # Simplified the weighted factor\n    \n    new_distance_matrix = distance_matrix + (tour_difference + average_edge_usage) * weighted_factor  # Removed np.random.rand() from the weighted factor\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.max(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 1.89184,
          "other_inf": null
     }
}