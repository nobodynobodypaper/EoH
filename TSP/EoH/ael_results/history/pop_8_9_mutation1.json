{
     "parent1": {
          "algorithm": "\nAlgorithm description: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by adding a specific value to the distances of these edges. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix + 10 * edges_in_local_opt_tour  # Updated to adding a specific value    \n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.384,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: \nThe new algorithm will first identify the edges used in the local optimal tour and the global optimal tour, then calculate the deviation of the local optimal tour from the global optimal tour. Next, it will update the distance matrix by considering the deviation and the number of times each edge is used, finally sort the nodes based on their deviation and frequency of use to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    local_edges = set(zip(local_opt_tour, local_opt_tour[1:]))\n    global_edges = set(zip(global_opt_tour, global_opt_tour[1:]))\n    deviation = len(local_edges - global_edges) / len(global_edges)\n\n    edge_penalty = edge_n_used / edge_n_used.max()\n    new_distance_matrix = distance_matrix + deviation * edge_penalty\n    perturb_nodes = np.argsort(-deviation + edge_n_used.sum(axis=1))[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.292,
          "first_obj": null
     }
}