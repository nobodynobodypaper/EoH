{
     "parent1": {
          "algorithm": "\nIdea: The new algorithm will first identify the edges that are heavily utilized in the local and global optimal tours and update the distance matrix by adding a combination of these edge counts. Then, it will calculate the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed and sort the nodes based on their potential impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_tours = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_tours[start][end] += 1\n        edges_in_tours[end][start] += 1\n\n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        edges_in_tours[start][end] += 1\n        edges_in_tours[end][start] += 1\n\n    new_distance_matrix = distance_matrix + edges_in_tours\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.351,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nAlgorithm description: \nThe new algorithm will first identify the edges that are commonly used in the local optimal tour and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by adding a factor to these edges and adjusting the distances based on the potential impact of perturbing each node, rather than multiplying. Finally, it will sort the nodes based on the potential impact and return the updated distance matrix and the sorted nodes to perturb, prioritizing nodes that will lead to minimized total distance.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    \n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n    \n    new_distance_matrix = distance_matrix + edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-perturb_impact)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.357,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nIdea: The new algorithm will first identify the nodes that are least utilized in both the local and global optimal tours and update the distance matrix by reducing the distances to these nodes. Then, it will calculate the potential impact of perturbing each node by considering the increase in the total distance if that node is perturbed and sort the nodes based on their potential impact, prioritizing those with the highest potential impact, to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    nodes_least_used = np.sum(edge_n_used, axis=1)\n\n    new_distance_matrix = distance_matrix - np.outer(nodes_least_used, nodes_least_used)\n    perturb_impact = np.sum(edge_n_used * (new_distance_matrix - distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-perturb_impact)\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 1.105,
          "first_obj": null
     }
}