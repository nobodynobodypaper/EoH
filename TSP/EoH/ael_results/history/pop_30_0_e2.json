{
     "parent1": {
          "algorithm": "Create a new algorithm that updates the distance matrix by combining the exponential of the difference between the local and global optimum tours, the product of the edge usage and a random factor, and then sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference_exp = np.exp(local_opt_tour - global_opt_tour)\n    product_avg_random = np.mean(edge_n_used, axis=1) * np.random.rand(distance_matrix.shape[0])\n    \n    new_distance_matrix = distance_matrix + tour_difference_exp + product_avg_random\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.04932,
          "other_inf": null
     },
     "parent2": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by computing the sum of the difference between the local and global optimum tours, the product of the edge usage and a random factor, and a transformation of the inverse distance matrix, then sorts the nodes based on the weighted average of edge usage and the minimum distance from the global optimum tour to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference = (local_opt_tour - global_opt_tour)\n    product_avg_random = np.mean(edge_n_used, axis=1) * np.random.rand(distance_matrix.shape[0])\n    inverse_distance_matrix = 1 / (distance_matrix + 1)\n    \n    new_distance_matrix = distance_matrix + tour_difference + product_avg_random + inverse_distance_matrix\n    perturb_nodes = np.argsort(0.6*np.mean(edge_n_used, axis=1) + 0.4*np.min(new_distance_matrix, axis=1))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.14402,
          "other_inf": null
     },
     "parent3": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by considering the weighted sum of the logarithm of normalized edge usage, the squared difference between the local and global optimum tours, and a random factor, and sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    weighted_combined_metric = (0.3 * (np.log(edge_n_used / np.max(edge_n_used)))) + (0.7 * (local_opt_tour - global_opt_tour) ** 2)\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = distance_matrix + weighted_combined_metric + (0.2 * randomness)\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.03099,
          "other_inf": null
     },
     "parent4": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating a combination of the normalized edge usage, the average difference between local and global optimum tours, and the randomness, and sorts the nodes based on the maximum normalized edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.6 * (edge_n_used / np.max(edge_n_used))) + (0.4 * (local_opt_tour - global_opt_tour))\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = distance_matrix + combined_metric + (0.1 * randomness)\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.03538,
          "other_inf": null
     },
     "parent5": {
          "algorithm": "Create a new algorithm that updates the distance matrix by combining the exponential of the difference between the local and global optimum tours, the product of the edge usage and a random factor, and then sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference_exp = np.exp(local_opt_tour - global_opt_tour)\n    product_avg_random = np.mean(edge_n_used, axis=1) * np.random.rand(distance_matrix.shape[0])\n    \n    new_distance_matrix = distance_matrix + tour_difference_exp + product_avg_random\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.04932,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating the absolute value of the difference between the local and global optimum tours, the ratio of edge usage to the maximum value, and a square of the distance matrix, and then sorts the nodes based on the absolute difference between local and global optimum tours and the sum of edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    abs_tour_difference = np.abs(local_opt_tour - global_opt_tour)\n    edge_usage_ratio = edge_n_used / np.max(edge_n_used)\n    squared_distance_matrix = np.square(distance_matrix)\n    \n    new_distance_matrix = distance_matrix + abs_tour_difference + edge_usage_ratio + squared_distance_matrix\n    perturb_nodes = np.argsort(np.abs(local_opt_tour - global_opt_tour) + np.sum(edge_n_used, axis=1))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.13603,
          "other_inf": null
     }
}