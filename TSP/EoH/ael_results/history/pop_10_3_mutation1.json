{
     "parent1": {
          "algorithm": "\nThe algorithm will first identify the edges that are commonly used in the local optimal tour and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by penalizing the edges based on their frequency of use and the potential impact of perturbing each node, and finally sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-penalty.sum(axis=1) + perturb_impact)[::-1]\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.333,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: The new algorithm will first identify the nodes with high frequency of use in the local optimal tour and calculate the potential impact of perturbing each node. Then, it will update the distance matrix by considering the impact of perturbing these nodes and sort them based on their potential impact to avoid being trapped in the local optimum tour.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    node_frequency = np.zeros(distance_matrix.shape[0])\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        node_frequency[start] += 1\n        node_frequency[end] += 1\n\n    perturb_impact = np.sum(edge_n_used * distance_matrix, axis=1)\n    perturb_nodes = np.argsort(perturb_impact / node_frequency)[::-1]\n\n    new_distance_matrix = distance_matrix - 0.5 * edge_n_used * distance_matrix * node_frequency[perturb_nodes[0]]\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.249,
          "first_obj": null
     }
}