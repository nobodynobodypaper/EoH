{
     "parent1": {
          "algorithm": "\nThe algorithm idea is to identify edges that are commonly used in the local optimal tour and update the distance matrix by penalizing these edges based on their frequency of use. Then, sort the nodes based on the penalty to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_nodes = np.argsort(-penalty.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.474,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nThe new algorithm aims to identify potential bottlenecks in the local optimal tour by measuring the clustering coefficient around each node, and update the distance matrix accordingly. Then, it will sort the nodes based on the clustering coefficient to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    clustering_coefficient = np.zeros(distance_matrix.shape[0])\n    for i in range(len(local_opt_tour)):\n        neighbors = np.nonzero(distance_matrix[i] < np.inf)[0]\n        if len(neighbors) > 1:\n            edges_within_neighbors = distance_matrix[np.ix_(neighbors, neighbors)]\n            clustering_coefficient[i] = 2 * np.sum(np.triu(edges_within_neighbors, k=1)) / (len(neighbors) * (len(neighbors) - 1))\n\n    perturb_nodes = np.argsort(-clustering_coefficient)\n    new_distance_matrix = distance_matrix + clustering_coefficient.reshape(-1, 1) * edge_n_used\n    return new_distance_matrix, perturb_nodes",
          "objective": 1.571,
          "first_obj": null
     }
}