{
     "parent1": {
          "algorithm": "\nIdea: The algorithm will first update the distance matrix based on the local optimal tour, global optimal tour, and the number of times each edge is used. Then, it will sort the nodes based on a weighted combination of the distance to the closest neighbor and the number of times each node is visited in the tour to provide the top nodes to perturb to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update distance matrix\n    new_distance_matrix = distance_matrix * (1 + edge_n_used)\n    \n    # Calculate weighted combination of distance to closest neighbor and number of times each node is visited in the tour\n    weighted_distance = np.min(new_distance_matrix, axis=1)\n    node_visits = np.bincount(local_opt_tour, minlength=len(distance_matrix))\n    weighted_combination = weighted_distance + (0.1 * node_visits)\n    \n    # Sort nodes based on the weighted combination\n    perturb_nodes = np.argsort(weighted_combination)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 1.377,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nIdea: The algorithm will first calculate the impact of perturbing each node by evaluating the potential reduction in the total distance if that node is perturbed. Then, it will update the distance matrix based on the impact of perturbing each node and the utilization of edges in the local optimal tour, and finally, it will sort the nodes based on their impact and provide the top nodes to perturb.\n\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - distance_matrix[local_opt_tour[:, np.newaxis], local_opt_tour]), axis=1)\n    impact_matrix = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        impact_matrix[start][end] = perturb_impact[start]\n        impact_matrix[end][start] = perturb_impact[end]\n\n    new_distance_matrix = distance_matrix + impact_matrix\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.189,
          "first_obj": null
     }
}