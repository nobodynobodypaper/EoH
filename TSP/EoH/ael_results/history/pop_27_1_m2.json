{
     "parent1": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by computing the product of the weighted sum of the normalized edge usage, the difference between the local and global optimum tours, and a random factor, and then sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    weighted_combined_metric = (0.6 * (edge_n_used / np.max(edge_n_used))) + (0.4 * (local_opt_tour - global_opt_tour))\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = distance_matrix + (weighted_combined_metric * (0.3 * randomness))\n    perturb_nodes = np.argsort(np.minimum(np.min(edge_n_used, axis=1), np.max(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 2.12988,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nDescription: Create a new algorithm that updates the distance matrix by computing the product of the weighted sum of the normalized edge usage, the square of the difference between the local and global optimum tours, and a random factor, and then sorts the nodes based on the maximum distance from the global optimum tour and minimum edge usage to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    weighted_combined_metric = (0.6 * (edge_n_used / np.max(edge_n_used))) + (0.4 * ((local_opt_tour - global_opt_tour) ** 2))\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = distance_matrix + (weighted_combined_metric * (0.3 * randomness))\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.19917,
          "other_inf": null
     }
}