{
     "parent2": {
          "algorithm": "\nThe algorithm will first identify the edges that are commonly used in the local optimal tour and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by penalizing the edges based on their frequency of use and the potential impact of perturbing each node, and finally sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-penalty.sum(axis=1) + perturb_impact)[::-1]\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.333,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: \nThe new algorithm will first identify the edges used in the local optimal tour and the global optimal tour, then calculate the deviation of the local optimal tour from the global optimal tour. Next, it will update the distance matrix by considering the deviation and the number of times each edge is used, finally sort the nodes based on their deviation and frequency of use to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    local_edges = set(zip(local_opt_tour, local_opt_tour[1:]))\n    global_edges = set(zip(global_opt_tour, global_opt_tour[1:]))\n    deviation = len(local_edges - global_edges) / len(global_edges)\n\n    edge_penalty = edge_n_used / edge_n_used.max()\n    new_distance_matrix = distance_matrix + deviation * edge_penalty\n    perturb_nodes = np.argsort(-deviation + edge_n_used.sum(axis=1))[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.292,
          "first_obj": null
     }
}