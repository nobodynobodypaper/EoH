{
     "parent1": {
          "algorithm": "\nCreate a new algorithm to update the distance matrix using a unique scoring function that incorporates local optimum, global optimum, and edge usage, then sort the nodes based on a different scoring function to find the top ones to perturb to avoid local optimum and minimize total distance.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Implement the new unique scoring function to update the distance matrix\n    new_distance_matrix = distance_matrix + edge_n_used + (local_opt_tour - global_opt_tour) - np.random.uniform(0, 1, size=distance_matrix.shape)  # unique scoring function\n\n    # Sort the nodes using a different scoring function for perturbation\n    perturb_nodes = np.argsort(np.max(new_distance_matrix, axis=1))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.09942,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm to update the distance matrix using a unique scoring function that incorporates local optimum, global optimum, and edge usage, then sort the nodes based on a different scoring function to find the top ones to perturb to avoid local optimum and minimize total distance.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    perturb_factor = local_opt_tour - global_opt_tour - np.random.uniform(0, 1, size=distance_matrix.shape)\n    new_distance_matrix = distance_matrix + edge_n_used + perturb_factor  # unique scoring function\n\n    perturb_nodes = np.argsort(np.max(new_distance_matrix, axis=1))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.10241,
          "other_inf": null
     }
}