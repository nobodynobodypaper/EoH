{
     "parent1": {
          "algorithm": "\nIdea: The new algorithm will identify the edges that are frequently used in the local optimal tour and calculate the potential impact of perturbing each node based on their neighboring edges. Then, it will update the distance matrix by adjusting the distances of the edges proportional to their usage and the potential impact of perturbing each node. Finally, it will sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour and return the updated distance matrix and the sorted nodes to perturb, prioritizing nodes that will lead to minimized total distance.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_usage = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_usage[start][end] += 1\n        edges_usage[end][start] += 1\n    \n    perturb_impact = np.sum((1 / (edges_usage + 1)) * (distance_matrix - distance_matrix / (edges_usage + 1)), axis=1)\n    penalty = np.divide(edges_usage, (edge_n_used + 1), out=np.zeros_like(edges_usage), where=(edge_n_used + 1) != 0)\n    new_distance_matrix = distance_matrix + penalty * (edge_n_used + 1)\n    \n    perturb_nodes = np.argsort(-penalty.sum(axis=1) + perturb_impact)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.373,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nAlgorithm description: \nThe new algorithm will first identify the edges that are commonly used in the local optimal tour and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by adding a factor to these edges and adjusting the distances based on the potential impact of perturbing each node, rather than multiplying. Finally, it will sort the nodes based on the potential impact and return the updated distance matrix and the sorted nodes to perturb, prioritizing nodes that will lead to minimized total distance.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    \n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n    \n    new_distance_matrix = distance_matrix + edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-perturb_impact)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.357,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nIdea: The new algorithm will first identify the edges that are frequently used in the local optimal tour and calculate the average distance reduction if each node is perturbed. Then, it will update the distance matrix by adjusting the distances of the edges based on their usage and the potential impact of perturbing each node. Finally, it will sort the nodes based on the potential impact and return the updated distance matrix and the sorted nodes to perturb, prioritizing nodes that will lead to minimized total distance.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_usage = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_usage[start][end] += 1\n        edges_usage[end][start] += 1\n    \n    average_distance_reduction = np.sum((distance_matrix - distance_matrix / (edges_usage + 1)), axis=1) / (edges_usage.sum(axis=1) + 1)\n    new_distance_matrix = distance_matrix - edges_usage * (average_distance_reduction.reshape(-1, 1))\n    perturb_nodes = np.argsort(-average_distance_reduction)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 4.301,
          "first_obj": null
     }
}