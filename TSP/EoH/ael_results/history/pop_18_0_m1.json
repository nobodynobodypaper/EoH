{
     "parent1": {
          "algorithm": "Create an algorithm that updates the distance matrix by incorporating a weighted combination of the difference between local and global optimum tours, edge usage, and randomness, and then sorts the nodes based on the weighted combination of maximum distance from the global optimum tour and minimum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    weighted_combination = (0.5 * (local_opt_tour - global_opt_tour)) + (0.3 * edge_n_used) + (0.2 * np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1]))\n    \n    new_distance_matrix = distance_matrix + weighted_combination\n    \n    perturb_nodes = np.argsort((0.6 * np.max(edge_n_used, axis=1)) + (0.4 * np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.10171,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Create an algorithm that updates the distance matrix by combining the maximum distance from the global optimum tour and minimum edge usage, and then sorts the nodes based on this combined metric to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.6 * np.max(distance_matrix - global_opt_tour, axis=1)) + (0.4 * np.min(edge_n_used, axis=1))\n    \n    new_distance_matrix = distance_matrix + (0.2 * np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1]))\n    \n    perturb_nodes = np.argsort(combined_metric)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 2.20374,
          "other_inf": null
     }
}