{
     "parent1": {
          "algorithm": "\nThe new algorithm will first identify the edges that are commonly used in the local optimal tour and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by combining the penalties and perturbations into a combined impact score for each node, and finally sort the nodes based on this combined impact score to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    combined_impact = np.zeros(distance_matrix.shape[0])\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, (edge_n_used + 1), out=np.zeros_like(penalty), where=(edge_n_used + 1) != 0)\n    new_distance_matrix = distance_matrix + penalty * (edge_n_used + 1)\n    perturb_impact = distance_matrix - new_distance_matrix\n    for i in range(len(combined_impact)):\n        combined_impact[i] = np.sum(penalty[i]) + np.sum(perturb_impact[i])\n    perturb_nodes = np.argsort(-combined_impact)\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.436,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nAlgorithm description: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by adding a specific value to the distances of these edges. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix + 10 * edges_in_local_opt_tour  # Updated to adding a specific value    \n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.384,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: \nThe new algorithm will calculate the impact of removing each node from the local optimal tour by simulating the updated tour distance if that node is removed. Then, it will update the distance matrix based on this impact and sort the nodes according to their potential to minimize the total distance of the tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_distance = np.sum(distance_matrix[local_opt_tour[:-1], local_opt_tour[1:]])\n    impact_of_removal = []\n    for node in local_opt_tour[1:-1]:\n        temp_tour = np.concatenate([local_opt_tour[:np.where(local_opt_tour == node)[0][0] + 1],\n                                   local_opt_tour[np.where(local_opt_tour == node)[0][0]+1:][1:]])\n        temp_distance = np.sum(distance_matrix[temp_tour[:-1], temp_tour[1:]])\n        impact_of_removal.append(tour_distance - temp_distance)\n    impact_of_removal = np.array(impact_of_removal)\n    updated_distance_matrix = distance_matrix - impact_of_removal[:, None]\n\n    perturb_nodes = np.argsort(-impact_of_removal)\n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "first_obj": null
     }
}