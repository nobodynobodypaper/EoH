{
     "parent1": {
          "algorithm": "Create a new algorithm that updates the distance matrix using a combination of the average edge usage, the difference between local and global optimum tours, and the standard deviation of edge usage, and then sorts the nodes based on the maximum edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    average_edge_usage = np.mean(edge_n_used, axis=1)\n    standard_deviation_edge_usage = np.std(edge_n_used, axis=1)\n    \n    new_distance_matrix = distance_matrix + (0.4 * average_edge_usage) + (0.3 * (local_opt_tour - global_opt_tour)) + (0.3 * standard_deviation_edge_usage)\n    \n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.05931,
          "other_inf": null
     },
     "parent2": {
          "algorithm": "\nCreate an algorithm that updates the distance matrix by incorporating a combination of edge usage, the difference between local and global optimum tours, and a random factor, then sorts the nodes based on the maximum edge usage and the minimum distance from the global optimum tour to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    random_factor = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    update_factor = (0.4 * edge_n_used) + (0.4 * (local_opt_tour - global_opt_tour)) + (0.2 * random_factor)\n    new_distance_matrix = update_factor + distance_matrix\n    \n    max_edge_n_used = np.max(edge_n_used, axis=1)\n    min_new_distance_matrix = np.min(new_distance_matrix, axis=1)\n    perturb_nodes = np.argsort(np.maximum(max_edge_n_used, min_new_distance_matrix))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06227,
          "other_inf": null
     },
     "parent3": {
          "algorithm": "Create a new algorithm that updates the distance matrix by considering the weighted sum of normalized edge usage, the difference between the local and global optimum tours, and randomness, and sorts the nodes based on the combination of edge usage and distance from the global optimum tour.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.6 * (edge_n_used / np.max(edge_n_used))) + (0.4 * (local_opt_tour - global_opt_tour))\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = distance_matrix + combined_metric + (0.1 * randomness)\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.05739,
          "other_inf": null
     },
     "parent4": {
          "algorithm": "Create an algorithm that updates the distance matrix by combining the distance from the global optimum tour and the edge usage, and then sorts the nodes based on the maximum edge usage and the minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    unique_score = global_opt_tour - local_opt_tour\n    new_distance_matrix = distance_matrix + (0.5 * edge_n_used) + unique_score\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06267,
          "other_inf": null
     },
     "parent5": {
          "algorithm": "Create a new algorithm that updates the distance matrix using a combination of the average edge usage, the difference between local and global optimum tours, and the standard deviation of edge usage, and then sorts the nodes based on the maximum edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    average_edge_usage = np.mean(edge_n_used, axis=1)\n    standard_deviation_edge_usage = np.std(edge_n_used, axis=1)\n    \n    new_distance_matrix = distance_matrix + (0.4 * average_edge_usage) + (0.3 * (local_opt_tour - global_opt_tour)) + (0.3 * standard_deviation_edge_usage)\n    \n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.05931,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by considering the sum of the square root of edge usage, the absolute difference between local and global optimum tours, and a random factor, and then sorts the nodes based on the sum of edge usage and maximum distance from the global optimum tour to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edge_usage_square_root = np.sqrt(edge_n_used)\n    abs_difference = np.abs(local_opt_tour - global_opt_tour)\n    random_factor = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n\n    new_distance_matrix = distance_matrix + edge_usage_square_root + abs_difference + random_factor\n    edge_usage_sum = np.sum(edge_n_used, axis=1)\n    max_difference = np.max(np.abs(global_opt_tour - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(edge_usage_sum + max_difference)\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.2681,
          "other_inf": null
     }
}