{
     "parent1": {
          "algorithm": "\nIdea: The new algorithm will identify the nodes that are frequently used in both the local and global optimal tour and calculate the potential impact of perturbing each node. Then, it will update the distance matrix by penalizing the nodes based on their frequency of use and the potential impact of perturbing each node. Finally, it will sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    freq_penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        freq_penalty[start][end] += 1\n        freq_penalty[end][start] += 1\n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        freq_penalty[start][end] += 1\n        freq_penalty[end][start] += 1\n    freq_penalty = np.divide(freq_penalty, edge_n_used, out=np.zeros_like(freq_penalty), where=edge_n_used != 0)\n    \n    perturb_impact = np.sum(edge_n_used * (distance_matrix - (distance_matrix + freq_penalty * edge_n_used)), axis=1)\n    perturb_nodes = np.argsort(-freq_penalty.sum(axis=1) + perturb_impact)[::-1]\n    \n    new_distance_matrix = distance_matrix + freq_penalty * edge_n_used\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.376,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nIdea: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by adding a factor to these edges rather than multiplying. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix + edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.371,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nIdea: The new algorithm will first identify the nodes that are common between the local and global optimal tours and calculate the potential impact of perturbing each node based on the reduction in total distance. Then, it will update the distance matrix by adding a factor to the distances between these common nodes and sort the nodes based on their potential impact to avoid being trapped in a local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    common_nodes = np.intersect1d(local_opt_tour, global_opt_tour)\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - distance_matrix[common_nodes][:, common_nodes]), axis=1)\n    perturb_nodes = common_nodes[np.argsort(perturb_impact)[::-1]]\n\n    new_distance_matrix = distance_matrix + distance_matrix[:, common_nodes]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.292,
          "first_obj": null
     }
}