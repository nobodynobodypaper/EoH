{
     "parent1": {
          "algorithm": "\nNew algorithm: Create a strategy to randomly perturb the edge distances along the local optimal route to escape from the local optimum and move towards a global optimum, by increasing the distances of the edges used in the local optimal tour.\n}\n\n```python\nimport numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    num_edges = edge_distance.shape[0]\n    \n    # Increase the distance of edges used in the local optimal tour\n    for i in range(len(local_opt_tour) - 1):\n        start_node = local_opt_tour[i]\n        end_node = local_opt_tour[i + 1]\n        edge_index = edge_n_used[start_node][end_node]\n        updated_edge_distance[start_node][end_node] *= 1.1\n    \n    return updated_edge_distance\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    num_edges = edge_distance.shape[0]\n    \n    # Increase the distance of edges used in the local optimal tour\n    for i in range(len(local_opt_tour) - 1):\n        start_node = local_opt_tour[i]\n        end_node = local_opt_tour[i + 1]\n        edge_index = edge_n_used[start_node][end_node]\n        updated_edge_distance[start_node][end_node] *= 1.1\n    \n    return updated_edge_distance",
          "objective": 3.2823,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Modify the edge distances randomly along the local optimal route to escape from the local optimum and move towards a global optimum, by perturbing the distances of the edges used in the local optimal tour.\n\nCode:\nimport numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    for i in range(len(local_opt_tour) - 1):\n        start_node = local_opt_tour[i]\n        end_node = local_opt_tour[i + 1]\n        edge_index = edge_n_used[start_node][end_node]\n        perturbation_factor = np.random.uniform(0.9, 1.1)  # Randomly perturb the edge distance\n        updated_edge_distance[start_node][end_node] *= perturbation_factor\n    \n    return updated_edge_distance\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    for i in range(len(local_opt_tour) - 1):\n        start_node = local_opt_tour[i]\n        end_node = local_opt_tour[i + 1]\n        edge_index = edge_n_used[start_node][end_node]\n        perturbation_factor = np.random.uniform(0.9, 1.1)  # Randomly perturb the edge distance\n        updated_edge_distance[start_node][end_node] *= perturbation_factor\n    \n    return updated_edge_distance",
          "objective": 2.72499,
          "other_inf": null
     }
}