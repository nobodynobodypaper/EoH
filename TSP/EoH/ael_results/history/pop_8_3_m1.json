{
     "parent1": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix by introducing a mutation factor that is dependent on the edge count, distance, and usage, aiming to encourage exploration while also considering the impact of individual edge usage.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_count = np.zeros_like(edge_distance)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n    \n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                updated_edge_distance[i][j] += (np.random.uniform(0.7, 1.3) / edge_count[i][j]) + (edge_distance[i][j] / np.mean(edge_distance)) - (0.3 / np.max(edge_n_used)) * edge_n_used[i][j] * (1 + edge_count[i][j])\n\n    return updated_edge_distance",
          "objective": 0.02336,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix by adding a penalty factor for frequently used edges and adjusting the distance based on the average distance and edge usage.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_count = np.zeros_like(edge_distance)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n    \n    avg_distance = np.mean(edge_distance)\n    max_edge_used = np.max(edge_n_used)\n    \n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                penalty = 0.1 * edge_count[i][j] / max_edge_used\n                updated_edge_distance[i][j] += (np.random.uniform(0.7, 1.3) / edge_count[i][j]) + (edge_distance[i][j] / avg_distance) - penalty\n\n    return updated_edge_distance",
          "objective": 0.04502,
          "other_inf": null
     }
}