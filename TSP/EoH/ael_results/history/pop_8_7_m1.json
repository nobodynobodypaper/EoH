{
     "parent1": {
          "algorithm": "New algorithm: Update the edge distances in the edge distance matrix by incorporating a dynamic scaling factor that takes into account the frequency of edge usage, the reciprocal of the edge count, and the mean edge distance to promote exploration and improve the search for a better solution.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_count = np.zeros_like(edge_distance)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n    \n    mean_edge_distance = np.mean(edge_distance)\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                scaling_factor = (edge_count[i][j] + (1 / np.sqrt(max(edge_n_used[i][j], 1)))) / mean_edge_distance\n                updated_edge_distance[i][j] += scaling_factor * (1 + edge_count[i][j])\n\n    return updated_edge_distance",
          "objective": 0.0164,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix by adding a penalty to the distance of edges used frequently in the local optimal tour, scaling the penalty using the reciprocal of the edge count and the mean edge distance to promote exploration.\n\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_count = np.zeros_like(edge_distance)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n    \n    mean_edge_distance = np.mean(edge_distance)\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                penalty = (1 / edge_count[i][j]) * mean_edge_distance\n                updated_edge_distance[i][j] += penalty\n\n    return updated_edge_distance",
          "objective": 2.57075,
          "other_inf": null
     }
}