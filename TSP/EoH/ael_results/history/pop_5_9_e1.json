{
     "parent1": {
          "algorithm": "Update the edge distances by considering the frequency of each edge used in the local optimal tour and incorporating a custom non-linear transformation of the edge count and distance, along with a normalized factor based on the reciprocal of edge usage, to guide the search towards a better solution.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_distance)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                transformation_factor = (edge_count[i][j] ** 2) / (edge_distance[i][j] + 1)  # Custom non-linear transformation\n                normalized_factor = (1 / max(edge_n_used[i][j], 1))\n                updated_edge_distance[i][j] += transformation_factor + normalized_factor\n\n    return updated_edge_distance",
          "objective": 0.05561,
          "other_inf": null
     },
     "parent2": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix based on the occurrence of each edge used in the local optimal tour with a noise factor that depends on a custom combination of edge count and distance to guide the search towards a better solution using a modified scoring function with a lower noise factor and a higher weight for edge count compared to the previous algorithm.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_count = np.zeros_like(edge_distance)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n    \n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                noise_factor = 0.5 * np.random.uniform() * (1 / edge_count[i][j]) + (edge_distance[i][j] / np.mean(edge_distance))\n                updated_edge_distance[i][j] += noise_factor * (1 + edge_count[i][j])\n\n    return updated_edge_distance",
          "objective": 0.06748,
          "other_inf": null
     },
     "parent3": {
          "algorithm": "Update the edge distances by considering the frequency of each edge used in the local optimal tour and incorporating a custom non-linear transformation of the edge count and distance, along with a normalized factor based on the reciprocal of edge usage, to guide the search towards a better solution.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_distance)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                transformation_factor = (edge_count[i][j] ** 2) / (edge_distance[i][j] + 1)  # Custom non-linear transformation\n                normalized_factor = (1 / max(edge_n_used[i][j], 1))\n                updated_edge_distance[i][j] += transformation_factor + normalized_factor\n\n    return updated_edge_distance",
          "objective": 0.05561,
          "other_inf": null
     },
     "parent4": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix based on the occurrence of each edge used in the local optimal tour with a noise factor that depends on a custom combination of edge count and distance to guide the search towards a better solution.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_count = np.zeros_like(edge_distance)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n    \n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                noise_factor = 0.5 * np.random.uniform() * (1 / edge_count[i][j]) + (edge_distance[i][j] / np.max(edge_distance))\n                updated_edge_distance[i][j] += noise_factor\n\n    return updated_edge_distance",
          "objective": 0.0526,
          "other_inf": null
     },
     "parent5": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix based on the occurrence of each edge used in the local optimal tour with a noise factor that depends on a custom combination of edge count and distance to guide the search towards a better solution.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_count = np.zeros_like(edge_distance)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n    \n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                noise_factor = 0.5 * np.random.uniform() * (1 / edge_count[i][j]) + (edge_distance[i][j] / np.max(edge_distance))\n                updated_edge_distance[i][j] += noise_factor\n\n    return updated_edge_distance",
          "objective": 0.0526,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix based on the pairwise differences of edge counts between the current local optimal tour and a randomly perturbed tour to encourage exploration of different routes and avoid getting trapped in local optimums.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edge_counts_diff = np.zeros_like(edge_distance)\n    for _ in range(5):  # Perturb the local_opt_tour 5 times\n        np.random.shuffle(local_opt_tour)  # Randomly perturb the tour\n        perturbed_edge_counts = np.zeros_like(edge_distance)\n        for i in range(len(local_opt_tour) - 1):\n            start = local_opt_tour[i]\n            end = local_opt_tour[i + 1]\n            perturbed_edge_counts[start][end] += 1\n            perturbed_edge_counts[end][start] += 1\n        edge_counts_diff += np.abs(perturbed_edge_counts - edge_n_used)\n    \n    normalization_factor = 1 / (np.max(edge_counts_diff) + 1)\n    updated_edge_distance += edge_counts_diff * normalization_factor\n    \n    return updated_edge_distance",
          "objective": 3.07814,
          "other_inf": null
     }
}