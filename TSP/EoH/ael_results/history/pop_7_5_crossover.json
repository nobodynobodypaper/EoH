{
     "parent1": {
          "algorithm": "\nIdea: The new algorithm will identify the nodes that are critical for the local and global optimal tours and calculate the potential impact of perturbing each node based on their utilization. Then, it will update the distance matrix by penalizing the nodes based on their frequency of use and potential impact of perturbing each node. Finally, it will sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    node_penalty = np.zeros(len(distance_matrix))\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        node_penalty[start] += edge_n_used[start][end]\n        node_penalty[end] += edge_n_used[end][start]\n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        node_penalty[start] += edge_n_used[start][end]\n        node_penalty[end] += edge_n_used[end][start]\n    \n    perturb_impact = np.sum(edge_n_used * (distance_matrix - (distance_matrix + node_penalty)), axis=1)\n    perturb_nodes = np.argsort(-node_penalty + perturb_impact)[::-1]\n    \n    new_distance_matrix = distance_matrix + node_penalty\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.668,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nThe algorithm will first identify the edges that are commonly used in the local optimal tour and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by penalizing the edges based on their frequency of use and the potential impact of perturbing each node, and finally sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-penalty.sum(axis=1) + perturb_impact)[::-1]\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.333,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nIdea: The new algorithm will first identify the nodes that are commonly used in both the local and global optimal tours, and calculate the potential impact of perturbing each node based on their utilization. Then, it will update the distance matrix by penalizing the nodes and edges based on their frequency of use and potential impact of perturbing each node, and finally, it will sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    node_penalty = np.zeros(len(distance_matrix))\n    edge_penalty = np.zeros(distance_matrix.shape)\n    \n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        node_penalty[start] += edge_n_used[start][end]\n        node_penalty[end] += edge_n_used[end][start]\n        edge_penalty[start][end] += 1\n        edge_penalty[end][start] += 1\n        \n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        node_penalty[start] += edge_n_used[start][end]\n        node_penalty[end] += edge_n_used[end][start]\n        edge_penalty[start][end] += 1\n        edge_penalty[end][start] += 1\n        \n    perturb_impact = np.sum(edge_n_used * (distance_matrix - (distance_matrix + node_penalty + edge_penalty)), axis=1)\n    perturb_nodes = np.argsort(-node_penalty + perturb_impact)[::-1]\n    \n    new_distance_matrix = distance_matrix + node_penalty + edge_penalty * edge_n_used\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.634,
          "first_obj": null
     }
}