{
     "parent1": {
          "algorithm": "\nNew algorithm description: Create an algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of maximum distance from the global optimum tour and minimum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef update_distance_matrix(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.6 * (local_opt_tour - global_opt_tour)) + (0.3 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of maximum distance from the global optimum tour and minimum edge usage\n    weighted_distance = 0.6 * np.max(new_distance_matrix, axis=1) + 0.4 * np.min(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06191,
          "other_inf": null
     },
     "parent2": {
          "algorithm": "Create a new algorithm that updates the distance matrix using a combination of the average edge usage, the difference between local and global optimum tours, and the standard deviation of edge usage, and then sorts the nodes based on the maximum edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    average_edge_usage = np.mean(edge_n_used, axis=1)\n    standard_deviation_edge_usage = np.std(edge_n_used, axis=1)\n    \n    new_distance_matrix = distance_matrix + (0.4 * average_edge_usage) + (0.3 * (local_opt_tour - global_opt_tour)) + (0.3 * standard_deviation_edge_usage)\n    \n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.05931,
          "other_inf": null
     },
     "parent3": {
          "algorithm": "Create a new algorithm that updates the distance matrix using a combination of the average edge usage, the difference between local and global optimum tours, and the standard deviation of edge usage, and then sorts the nodes based on the maximum edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    average_edge_usage = np.mean(edge_n_used, axis=1)\n    standard_deviation_edge_usage = np.std(edge_n_used, axis=1)\n    \n    new_distance_matrix = distance_matrix + (0.4 * average_edge_usage) + (0.3 * (local_opt_tour - global_opt_tour)) + (0.3 * standard_deviation_edge_usage)\n    \n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.05931,
          "other_inf": null
     },
     "parent4": {
          "algorithm": "\nNew algorithm description: Create an algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of maximum distance from the global optimum tour and minimum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef update_distance_matrix(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.6 * (local_opt_tour - global_opt_tour)) + (0.3 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of maximum distance from the global optimum tour and minimum edge usage\n    weighted_distance = 0.6 * np.max(new_distance_matrix, axis=1) + 0.4 * np.min(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06191,
          "other_inf": null
     },
     "parent5": {
          "algorithm": "\nNew algorithm description: Create an algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of maximum distance from the global optimum tour and minimum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef update_distance_matrix(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.6 * (local_opt_tour - global_opt_tour)) + (0.3 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of maximum distance from the global optimum tour and minimum edge usage\n    weighted_distance = 0.6 * np.max(new_distance_matrix, axis=1) + 0.4 * np.min(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06191,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "Create an algorithm that updates the distance matrix by considering a weighted combination of local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a balance between maximum edge usage and minimum distance from the global optimum tour to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    weighted_distance = 0.6 * (local_opt_tour - global_opt_tour) + 0.3 * edge_n_used + 0.1 * randomness\n    new_distance_matrix = weighted_distance + distance_matrix\n    \n    # Sort the nodes based on a balance between maximum edge usage and minimum distance from the global optimum tour\n    balance = 0.5 * np.max(edge_n_used, axis=1) - 0.5 * np.min(new_distance_matrix, axis=1)\n    perturb_nodes = np.argsort(balance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.09477,
          "other_inf": null
     }
}