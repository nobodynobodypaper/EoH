{
     "parent1": {
          "algorithm": "\nIdea: The new algorithm will first identify the edges that are heavily utilized in the local and global optimal tours and update the distance matrix by adding a combination of these edge counts. Then, it will calculate the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed and sort the nodes based on their potential impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_tours = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_tours[start][end] += 1\n        edges_in_tours[end][start] += 1\n\n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        edges_in_tours[start][end] += 1\n        edges_in_tours[end][start] += 1\n\n    new_distance_matrix = distance_matrix + edges_in_tours\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.351,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nThe new algorithm will identify the edges that are commonly used in the local optimal tour and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by adjusting the distances of the edges based on their frequency of use and the potential impact of perturbing each node. Finally, it will sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour and return the updated distance matrix and the sorted nodes to perturb, prioritizing nodes that will lead to minimized total distance.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, (edge_n_used + 1), out=np.zeros_like(penalty), where=(edge_n_used + 1) != 0)\n    new_distance_matrix = distance_matrix + penalty * (edge_n_used + 1)\n    perturb_impact = np.sum((1 / (edge_n_used + 1)) * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-penalty.sum(axis=1) + perturb_impact)\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.304,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nIdea: The new algorithm will first identify the nodes that are frequently visited in both the local and global optimal tours and calculate the potential impact of perturbing each node on the total distance reduction. Then, it will update the distance matrix by incorporating the impact of perturbing each node and sort the nodes based on their potential impact to evade the local optimum tour and achieve a minimized total distance tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    node_frequency = np.zeros(distance_matrix.shape[0])\n    for node in local_opt_tour:\n        node_frequency[node] += 1\n    for node in global_opt_tour:\n        node_frequency[node] += 1\n\n    perturb_impact = np.sum((1 / (node_frequency + 1)) * (distance_matrix - np.mean(distance_matrix)), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    new_distance_matrix = distance_matrix - np.min(distance_matrix) + np.mean(distance_matrix) + np.outer(perturb_impact, np.ones(distance_matrix.shape[0]))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.142,
          "first_obj": null
     }
}