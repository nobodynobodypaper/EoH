{
     "parent1": {
          "algorithm": "Common backbone idea: Combining different metrics (e.g., edge usage, tour difference) and adding randomness to update the distance matrix and sorting the nodes to identify top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.2 * edge_n_used) + (0.5 * (local_opt_tour - global_opt_tour)) + (0.3 * np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1]))\n    new_distance_matrix = distance_matrix + combined_metric\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.08178,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Utilizing a combination of edge usage, difference between local and global optimum tours, and a fixed random seed to update the distance matrix and sort the nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    combined_metric = (0.3 * edge_n_used) + (0.4 * (local_opt_tour - global_opt_tour)) + (0.3 * np.random.RandomState(42).rand(distance_matrix.shape[0], distance_matrix.shape[1]))\n    new_distance_matrix = distance_matrix + combined_metric\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.10486,
          "other_inf": null
     }
}