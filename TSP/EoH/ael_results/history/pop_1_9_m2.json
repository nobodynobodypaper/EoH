{
     "parent1": {
          "algorithm": "\n    The algorithm updates the distance matrix based on edge usage, then identifies and sorts the top nodes to perturb to prevent trapping in the local optimum tour. \n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    new_distance_matrix = distance_matrix * edge_n_used\n    perturb_nodes = np.argsort(np.abs(local_opt_tour - global_opt_tour))[::-1]\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.20663,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\n    The new algorithm updates the distance matrix based on edge usage and identifies and sorts the top nodes to perturb to prevent trapping in the local optimum tour using a different parameter setting in the score function.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    new_distance_matrix = distance_matrix ** 2 / edge_n_used\n    perturb_nodes = np.argsort(np.abs(local_opt_tour - global_opt_tour)**2)[::-1]\n    return new_distance_matrix, perturb_nodes",
          "objective": 3.49348,
          "other_inf": null
     }
}