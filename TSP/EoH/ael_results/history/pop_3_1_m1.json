{
     "parent1": {
          "algorithm": "\nNew algorithm: Explore the local optimal route further by randomly selecting edges to be perturbed with a random noise factor between -0.5 and 0.5, and updating the edge distances to escape from the local optimum and move towards a global optimum.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    edges_to_perturb = np.random.choice(len(local_opt_tour) - 1, size=int(0.2*(len(local_opt_tour) - 1)), replace=False) # Perturb 20% of edges\n    \n    for i in edges_to_perturb:\n        start_node = local_opt_tour[i]\n        end_node = local_opt_tour[i + 1]\n        edge_index = edge_n_used[start_node][end_node]\n        updated_edge_distance[start_node][end_node] += np.random.uniform(-0.5, 0.5)\n    \n    return updated_edge_distance",
          "objective": 0.37009,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Explore the local optimal route further by selecting the longest edge in the route and increasing its distance by a small random factor, updating the edge distances to escape from the local optimum and move towards a global optimum.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    max_edge_length = -1\n    max_edge_index = -1\n    \n    for i in range(len(local_opt_tour) - 1):\n        start_node = local_opt_tour[i]\n        end_node = local_opt_tour[i + 1]\n        edge_index = edge_n_used[start_node][end_node]\n        if edge_distance[start_node][end_node] > max_edge_length:\n            max_edge_length = edge_distance[start_node][end_node]\n            max_edge_index = edge_index\n    \n    updated_edge_distance[start_node][end_node] += np.random.uniform(0, 0.5)\n    \n    return updated_edge_distance",
          "objective": 3.30448,
          "other_inf": null
     }
}