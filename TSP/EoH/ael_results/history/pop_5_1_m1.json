{
     "parent1": {
          "algorithm": "\nNew algorithm: Update the edge distances in the edge distance matrix by perturbing the edge distances randomly using a noise factor based on the sine function of the edge count to introduce variability and exploration in the search for a better solution.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_distance)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                noise_factor = np.random.uniform(-1, 1) * np.sin(edge_count[i][j])\n                updated_edge_distance[i][j] += noise_factor\n\n    return updated_edge_distance",
          "objective": 0.09143,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew Algorithm: Update the edge distances in the edge distance matrix by adding a perturbation value to the distances, where the perturbation value is calculated based on the number of times an edge is used in the local optimal tour, aiming to introduce diversity and avoid local optima.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    perturbation_value = np.zeros_like(edge_distance)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        perturbation_value[start][end] += edge_n_used[start][end]\n        perturbation_value[end][start] += edge_n_used[end][start]\n\n    updated_edge_distance += perturbation_value\n\n    return updated_edge_distance",
          "objective": 3.49348,
          "other_inf": null
     }
}