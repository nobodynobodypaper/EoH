{
     "parent1": {
          "algorithm": "Create a new algorithm that calculates the normalized average edge usage, the exponential of the difference between local and global optimum tours, and the sum of the distance from the global optimum tour and randomness, then sorts the nodes based on the maximum edge usage and minimum distance from the global optimum tour.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    normalized_avg_edge_usage = np.mean(edge_n_used, axis=1) / np.max(edge_n_used)\n    tour_difference_exp = np.exp(local_opt_tour - global_opt_tour)\n    distance_sum_random = np.sum((distance_matrix - global_opt_tour) + np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1]), axis=1)\n    \n    new_distance_matrix = distance_matrix + normalized_avg_edge_usage + tour_difference_exp + distance_sum_random\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.12146,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "Create a new algorithm that calculates the normalized average edge usage, the exponential of the difference between local and global optimum tours, and the sum of the distance from the global optimum tour and randomness, then sorts the nodes based on the maximum edge usage and minimum distance from the global optimum tour.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, edge_n_used):\n    normalized_avg_edge_usage = np.mean(edge_n_used, axis=1) / np.max(edge_n_used)\n    \n    distance_sum_random = np.sum((distance_matrix - np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])), axis=1)\n    \n    new_distance_matrix = distance_matrix + normalized_avg_edge_usage + distance_sum_random\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "other_inf": null
     }
}