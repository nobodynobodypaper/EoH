{
     "parent1": {
          "algorithm": "The algorithm idea is to update the distance matrix by considering the impact of perturbing each node based on both the local and global optimal tours. However, instead of directly sorting the nodes based on their impact, we will first create a priority queue where the priority is based on the impact value. Then, we will dequeue the top nodes from the priority queue to get the nodes to perturb.",
          "code": "import numpy as np\nimport heapq\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    new_distance_matrix = np.copy(distance_matrix)\n    \n    for i in range(len(local_opt_tour) - 1):\n        new_distance_matrix[local_opt_tour[i], local_opt_tour[i+1]] += edge_n_used[local_opt_tour[i], local_opt_tour[i+1]]\n        new_distance_matrix[local_opt_tour[i+1], local_opt_tour[i]] += edge_n_used[local_opt_tour[i+1], local_opt_tour[i]]\n        \n        new_distance_matrix[global_opt_tour[i], global_opt_tour[i+1]] += edge_n_used[global_opt_tour[i], global_opt_tour[i+1]]\n        new_distance_matrix[global_opt_tour[i+1], global_opt_tour[i]] += edge_n_used[global_opt_tour[i+1], global_opt_tour[i]]\n        \n    impact = np.zeros(distance_matrix.shape[0])\n    for i in range(len(impact)):\n        impact[i] = np.sum(new_distance_matrix[i, :]) + np.sum(new_distance_matrix[:, i]) - new_distance_matrix[i, i]\n    \n    perturb_nodes = []\n    for node, imp in enumerate(impact):\n        heapq.heappush(perturb_nodes, (imp, node))\n    \n    perturb_nodes = [node for _, node in perturb_nodes]\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.937,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nThe algorithm first calculates the impact of each node by considering the differences in distance between the local optimal and global optimal tours. Then, it updates the distance matrix by penalizing the distances between the nodes in the local optimal tour based on the number of times an edge is used in the global optimal tour. Finally, it sorts the nodes based on their impact and penalty to determine the top nodes to perturb, and returns the updated distance matrix and the sorted nodes.\n\nCode:\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    impact = np.abs(np.sum(distance_matrix[local_opt_tour[:-1], local_opt_tour[1:]]) - np.sum(distance_matrix[global_opt_tour[:-1], global_opt_tour[1:]]))\n    \n    new_distance_matrix = distance_matrix.copy()\n    for i in range(len(local_opt_tour)-1):\n        edge = (local_opt_tour[i], local_opt_tour[i+1])\n        new_distance_matrix[edge[0]][edge[1]] += edge_n_used[edge[0]][edge[1]] * impact\n        new_distance_matrix[edge[1]][edge[0]] += edge_n_used[edge[1]][edge[0]] * impact\n    \n    perturb_nodes = np.argsort(impact)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "first_obj": null
     }
}