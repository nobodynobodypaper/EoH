{
     "parent1": {
          "algorithm": "Create an algorithm that updates the distance matrix by combining the maximum edge usage, the difference between local and global optimum tours, and a weighted combination of standard deviation and randomness, and then sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by combining the maximum edge usage, the difference between local and global optimum tours, and a weighted combination of standard deviation and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    weighted_deviation = 0.5 * np.std(edge_n_used, axis=1)\n    new_distance_matrix = (0.5 * np.max(edge_n_used, axis=1)) + (0.4 * (local_opt_tour - global_opt_tour)) + (0.1 * (weighted_deviation + randomness)) + distance_matrix\n    \n    # Sort the nodes based on the minimum distance from the global optimum tour and maximum edge usage\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.17736,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "Create an algorithm that updates the distance matrix by combining the maximum edge usage, a weighted combination of the difference between local and global optimum tours and standard deviation, and randomness, and then sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by combining the maximum edge usage, a weighted combination of the difference between local and global optimum tours and standard deviation, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    weighted_deviation = 0.3 * np.std(edge_n_used, axis=1)\n    new_distance_matrix = (0.6 * np.max(edge_n_used, axis=1)) + (0.3 * (local_opt_tour - global_opt_tour)) + (0.1 * (weighted_deviation + randomness)) + distance_matrix\n    \n    # Sort the nodes based on the minimum distance from the global optimum tour and maximum edge usage\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.18074,
          "other_inf": null
     }
}