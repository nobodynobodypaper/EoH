{
     "parent2": {
          "algorithm": "\nIdea: The new algorithm will identify the nodes that are critical for the local and global optimal tours and calculate the potential impact of perturbing each node based on their utilization. Then, it will update the distance matrix by penalizing the nodes based on their frequency of use and potential impact of perturbing each node. Finally, it will sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    node_penalty = np.zeros(len(distance_matrix))\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        node_penalty[start] += edge_n_used[start][end]\n        node_penalty[end] += edge_n_used[end][start]\n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        node_penalty[start] += edge_n_used[start][end]\n        node_penalty[end] += edge_n_used[end][start]\n    \n    perturb_impact = np.sum(edge_n_used * (distance_matrix - (distance_matrix + node_penalty)), axis=1)\n    perturb_nodes = np.argsort(-node_penalty + perturb_impact)[::-1]\n    \n    new_distance_matrix = distance_matrix + node_penalty\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.668,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nIdea: The new algorithm will first identify the nodes that are frequently used in both the local and global optimal tours and calculate the potential impact of perturbing each node based on their utilization. Then, it will update the distance matrix by penalizing the nodes based on their frequency of use and potential impact of perturbing each node. Finally, it will sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    node_penalty = np.zeros(len(distance_matrix))\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        node_penalty[start] += edge_n_used[start][end]\n        node_penalty[end] += edge_n_used[end][start]\n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        node_penalty[start] += edge_n_used[start][end]\n        node_penalty[end] += edge_n_used[end][start]\n    \n    perturb_impact = np.sum(edge_n_used * (distance_matrix - (distance_matrix + node_penalty)), axis=1)\n    perturb_penalty = np.sum(node_penalty, axis=1)\n    perturb_nodes = np.lexsort((-perturb_penalty, -perturb_impact))\n\n    new_distance_matrix = distance_matrix + node_penalty\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "first_obj": null
     }
}