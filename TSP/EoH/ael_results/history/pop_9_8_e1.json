{
     "parent1": {
          "algorithm": "The new algorithm leverages the difference between local and global optimum tours and edge usage to update the distance matrix and identify nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    unique_score = (local_opt_tour - global_opt_tour)\n\n    new_distance_matrix = distance_matrix + unique_score + edge_n_used\n\n    perturb_nodes = np.argsort(np.maximum(-unique_score, np.max(edge_n_used, axis=1)))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.07293,
          "other_inf": null
     },
     "parent2": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.5 * (local_opt_tour - global_opt_tour)) + (0.4 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage\n    weighted_distance = 0.4 * np.min(new_distance_matrix, axis=1) + 0.6 * np.max(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.0683,
          "other_inf": null
     },
     "parent3": {
          "algorithm": "The new algorithm leverages the difference between local and global optimum tours and edge usage to update the distance matrix and identify nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    unique_score = (local_opt_tour - global_opt_tour)\n\n    new_distance_matrix = distance_matrix + unique_score + edge_n_used\n\n    perturb_nodes = np.argsort(np.maximum(-unique_score, np.max(edge_n_used, axis=1)))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.07293,
          "other_inf": null
     },
     "parent4": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours and edge usage, and sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours and edge usage\n    new_distance_matrix = (0.6 * (local_opt_tour - global_opt_tour)) + (0.4 * edge_n_used) + distance_matrix\n    \n    # Sort the nodes based on the minimum distance from the global optimum tour and maximum edge usage\n    perturb_nodes = np.argsort(np.maximum(np.min(new_distance_matrix, axis=1), np.max(edge_n_used, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06466,
          "other_inf": null
     },
     "parent5": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours and edge usage, and sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours and edge usage\n    new_distance_matrix = (0.6 * (local_opt_tour - global_opt_tour)) + (0.4 * edge_n_used) + distance_matrix\n    \n    # Sort the nodes based on the minimum distance from the global optimum tour and maximum edge usage\n    perturb_nodes = np.argsort(np.maximum(np.min(new_distance_matrix, axis=1), np.max(edge_n_used, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06466,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nThe new algorithm randomly perturbs a subset of the nodes in the distance matrix while prioritizing nodes that are close to the global optimum tour and have high edge usage, using a combination of weighted averages and randomness with a focus on exploration and exploitation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    \n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness\n    new_distance_matrix = (0.4 * (local_opt_tour - global_opt_tour)) + (0.4 * edge_n_used) + (0.2 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage\n    weighted_distance = 0.4 * np.min(new_distance_matrix, axis=1) + 0.6 * np.max(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.09316,
          "other_inf": null
     }
}