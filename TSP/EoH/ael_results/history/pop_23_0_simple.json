{
     "parent1": {
          "algorithm": "\n\nCreate a new algorithm that updates the distance matrix by combining the hyperbolic tangent of the difference between the local and global optimum tours, the logarithm of the edge usage, and a random factor, and then sorts the nodes based on the difference between the maximum and minimum edge usage and the maximum distance from the global optimum tour to identify the top nodes for perturbation.\n\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference_tanh = np.tanh(local_opt_tour - global_opt_tour)\n    log_edge_usage = np.log(edge_n_used)\n    random_factor = np.random.rand(distance_matrix.shape[0])\n    \n    new_distance_matrix = distance_matrix + tour_difference_tanh + log_edge_usage + random_factor\n    perturb_nodes = np.argsort(np.abs(np.max(edge_n_used, axis=1) - np.min(edge_n_used, axis=1)) + np.max(new_distance_matrix, axis=1))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.08561,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\n\nCreate a new algorithm that updates the distance matrix by combining the hyperbolic tangent of the difference between the local and global optimum tours, the logarithm of the edge usage, and a random factor, and then sorts the nodes based on the difference between the maximum and minimum edge usage and the maximum distance from the global optimum tour to identify the top nodes for perturbation.\n\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference_tanh = np.tanh(local_opt_tour - global_opt_tour)\n    log_edge_usage = np.log(edge_n_used)\n    random_factor = np.random.rand(distance_matrix.shape[0])\n    \n    new_distance_matrix = distance_matrix + tour_difference_tanh + log_edge_usage + random_factor\n    perturb_nodes = np.argsort(edge_n_used.max(axis=1) - edge_n_used.min(axis=1) + new_distance_matrix.max(axis=1))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.08505,
          "other_inf": null
     }
}