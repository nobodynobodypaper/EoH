{
     "parent2": {
          "algorithm": "\nThe algorithm will first update the distance matrix based on the local_opt_tour and edge_n_used, then it will calculate the potential impact of perturbing each node on the current tour by comparing the distances of alternate paths to the global_opt_tour, and finally, it will sort the nodes based on the potential impact to find the top nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update distance matrix\n    new_distance_matrix = distance_matrix.copy()\n    for i in range(len(local_opt_tour) - 1):\n        edge = (local_opt_tour[i], local_opt_tour[i+1])\n        new_distance_matrix[edge[0]][edge[1]] += edge_n_used[edge]\n        new_distance_matrix[edge[1]][edge[0]] += edge_n_used[edge]\n    \n    # Calculate potential impact of perturbing each node\n    potential_impact = np.zeros(len(local_opt_tour))\n    for i in range(len(local_opt_tour)):\n        if i == len(local_opt_tour) - 1:\n            edge = (local_opt_tour[i], local_opt_tour[0])\n        else:\n            edge = (local_opt_tour[i], local_opt_tour[i+1])\n        potential_impact[i] = new_distance_matrix[local_opt_tour[i]][local_opt_tour[i-1]] - distance_matrix[global_opt_tour[i]][local_opt_tour[i-1]]\n    \n    # Sort nodes based on potential impact\n    perturb_nodes = np.argsort(potential_impact)[::-1]\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 1.245,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm idea: The new algorithm will first identify the edges that deviate from the global optimal tour in the local optimal tour, update the distance matrix by subtracting a factor from these edges, calculate the potential impact of perturbing each node by considering the change in distance if that node is perturbed, and finally, sort the nodes based on their potential impact.\n\nCode:\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_deviate = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        if (start, end) not in global_opt_tour and (end, start) not in global_opt_tour:\n            edges_deviate[start][end] = 1\n            edges_deviate[end][start] = 1\n            \n    new_distance_matrix = distance_matrix - edges_deviate\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.301,
          "first_obj": null
     }
}