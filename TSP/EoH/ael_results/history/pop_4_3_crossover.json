{
     "parent1": {
          "algorithm": "\nThe algorithm idea is to identify edges that are commonly used in the local optimal tour and update the distance matrix by penalizing these edges based on their frequency of use. Then, sort the nodes based on the penalty to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_nodes = np.argsort(-penalty.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.474,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nThe algorithm idea is to update the distance matrix by penalizing edges frequently used in the local optimal tour, then sort the nodes based on the penalty to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour. \n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used!=0)\n    new_distance_matrix = distance_matrix + penalty\n    perturb_nodes = np.argsort(-penalty.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 1.159,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nThe algorithm idea is to identify nodes in the local optimal tour that have the most potential to improve the total distance of the tour when perturbed. The main steps are to calculate the change in distance for each node when perturbed, update the distance matrix based on this change, and then sort the nodes based on the potential for improvement to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    potential_improvement = np.zeros(distance_matrix.shape[0])\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        potential_improvement[start] += distance_matrix[start][end] - distance_matrix[end][start]\n        potential_improvement[end] += distance_matrix[start][end] - distance_matrix[end][start]\n    new_distance_matrix = distance_matrix - potential_improvement\n    perturb_nodes = np.argsort(-potential_improvement)\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.301,
          "first_obj": null
     }
}