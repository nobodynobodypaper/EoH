{
     "parent1": {
          "algorithm": "\nThe algorithm first updates the distance matrix by subtracting the distance saved in the local optimal tour from the global optimal tour. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    new_distance_matrix = distance_matrix - (global_opt_tour - local_opt_tour)\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.292,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nThe algorithm idea is to update the distance matrix by penalizing edges frequently used in the local optimal tour, then sort the nodes based on the penalty to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour. \n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used!=0)\n    new_distance_matrix = distance_matrix + penalty\n    perturb_nodes = np.argsort(-penalty.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 1.159,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nThe algorithm idea is to first identify the edges that are not part of the local optimal tour and update the distance matrix by subtracting a penalty from these edges. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_not_in_local_opt_tour = np.ones(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_not_in_local_opt_tour[start][end] = 0\n        edges_not_in_local_opt_tour[end][start] = 0\n\n    new_distance_matrix = distance_matrix - edges_not_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 1.745,
          "first_obj": null
     }
}