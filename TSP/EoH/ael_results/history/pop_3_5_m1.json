{
     "parent1": {
          "algorithm": "\nNew algorithm: Perturb the edge distances along the local optimal route by adding a random noise factor to each edge distance, the noise factor being a random value between -0.5 and 0.5, to increase the exploration space and escape from the local optimum.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    for i in range(len(local_opt_tour) - 1):\n        start_node = local_opt_tour[i]\n        end_node = local_opt_tour[i + 1]\n        edge_index = edge_n_used[start_node][end_node]\n        noise_factor = np.random.uniform(-0.5, 0.5)  # Add random noise to the edge distance\n        updated_edge_distance[start_node][end_node] += noise_factor\n    \n    return updated_edge_distance",
          "objective": 0.22699,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Randomly swap the edges along the local optimal route to introduce variations and escape from the local optimum.\n",
          "code": "import numpy as np\nimport random\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    tour_length = len(local_opt_tour)\n    for i in range(tour_length - 1):\n        swap_index = random.randint(0, tour_length - 2)\n        local_opt_tour[i + 1], local_opt_tour[swap_index] = local_opt_tour[swap_index], local_opt_tour[i + 1]\n        \n    for i in range(tour_length - 1):\n        start_node = local_opt_tour[i]\n        end_node = local_opt_tour[i + 1]\n        edge_index = edge_n_used[start_node][end_node]\n        noise_factor = np.random.uniform(-0.5, 0.5)  # Add random noise to the edge distance\n        updated_edge_distance[start_node][end_node] += noise_factor\n    \n    return updated_edge_distance",
          "objective": 0.49474,
          "other_inf": null
     }
}