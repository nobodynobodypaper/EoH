{
     "parent1": {
          "algorithm": "\nThe algorithm idea is to identify edges that are commonly used in the local optimal tour and update the distance matrix by penalizing these edges based on their frequency of use. Then, sort the nodes based on the penalty to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_nodes = np.argsort(-penalty.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.474,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nThe algorithm idea is to use a combination of heuristics and genetic algorithm techniques to update the distance matrix and identify the nodes to perturb in order to avoid local optimum tour traps. First, we will divide the local optimal tour into small sub-tours and identify the edges that are commonly used in these sub-tours to update the distance matrix. Then, we will use a genetic algorithm to determine the nodes with the highest potential impact on improving the total distance and sort them to be perturbed.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Dividing the local optimal tour into small sub-tours\n    sub_tours = []\n    sub_tour = []\n    for node in local_opt_tour:\n        if len(sub_tour) < 5:\n            sub_tour.append(node)\n        else:\n            sub_tours.append(sub_tour)\n            sub_tour = [node]\n    # Identify commonly used edges in sub-tours to update the distance matrix\n    penalty = np.zeros(distance_matrix.shape)\n    for sub_tour in sub_tours:\n        for i in range(len(sub_tour) - 1):\n            start = sub_tour[i]\n            end = sub_tour[i + 1]\n            penalty[start][end] += 1\n            penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    # Use genetic algorithm to determine the nodes with the highest potential impact\n    perturb_impact = np.random.random(size=len(distance_matrix))\n    perturb_nodes = np.argsort(-perturb_impact)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.71,
          "first_obj": null
     }
}