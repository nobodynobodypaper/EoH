{
     "parent1": {
          "algorithm": "\nThe new algorithm will first identify the edges that are commonly used in the local optimal tour and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by combining the penalties and perturbations into a combined impact score for each node, and finally sort the nodes based on this combined impact score to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    combined_impact = np.zeros(distance_matrix.shape[0])\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, (edge_n_used + 1), out=np.zeros_like(penalty), where=(edge_n_used + 1) != 0)\n    new_distance_matrix = distance_matrix + penalty * (edge_n_used + 1)\n    perturb_impact = distance_matrix - new_distance_matrix\n    for i in range(len(combined_impact)):\n        combined_impact[i] = np.sum(penalty[i]) + np.sum(perturb_impact[i])\n    perturb_nodes = np.argsort(-combined_impact)\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.436,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nIdea: The new algorithm will identify the nodes that are frequently used in both the local and global optimal tour and calculate the potential impact of perturbing each node. Then, it will update the distance matrix by penalizing the nodes based on their frequency of use and the potential impact of perturbing each node. Finally, it will sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    freq_penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        freq_penalty[start][end] += 1\n        freq_penalty[end][start] += 1\n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        freq_penalty[start][end] += 1\n        freq_penalty[end][start] += 1\n    freq_penalty = np.divide(freq_penalty, edge_n_used, out=np.zeros_like(freq_penalty), where=edge_n_used != 0)\n    \n    perturb_impact = np.sum(edge_n_used * (distance_matrix - (distance_matrix + freq_penalty * edge_n_used)), axis=1)\n    perturb_nodes = np.argsort(-freq_penalty.sum(axis=1) + perturb_impact)[::-1]\n    \n    new_distance_matrix = distance_matrix + freq_penalty * edge_n_used\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.376,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description:\nThe new algorithm will identify the nodes that have a high impact on the overall distance of the tour by analyzing the frequency of use in both the local and global optimal tours. It will then calculate the potential distance reduction if each node is perturbed and update the distance matrix to penalize the nodes based on their impact. Finally, it will sort the nodes based on the combined impact score to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    impact_score = np.zeros(distance_matrix.shape[0])\n    \n    # Calculate the potential impact of perturbing each node\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - (distance_matrix + np.divide(edge_n_used, distance_matrix, out=np.zeros_like(distance_matrix), where=distance_matrix != 0))), axis=1)\n    \n    # Update the distance matrix to penalize the nodes based on their frequency of use and potential impact\n    new_distance_matrix = distance_matrix + np.divide(edge_n_used, distance_matrix, out=np.zeros_like(distance_matrix), where=distance_matrix != 0)\n    \n    # Calculate the combined impact score for each node\n    for i in range(len(impact_score)):\n        impact_score[i] = np.sum(edge_n_used[i]) + np.sum(perturb_impact[i])\n    \n    # Sort the nodes based on the combined impact score\n    perturb_nodes = np.argsort(-impact_score)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 1.539,
          "first_obj": null
     }
}