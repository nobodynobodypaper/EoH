{
     "parent1": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by computing the sum of the difference between the local and global optimum tours and the product of the average edge usage and a random factor, then sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference = (local_opt_tour - global_opt_tour)\n    average_edge_usage = np.mean(edge_n_used, axis=1)\n    product_avg_random = average_edge_usage * np.random.rand(distance_matrix.shape[0])\n    \n    new_distance_matrix = distance_matrix + tour_difference + product_avg_random\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.0515,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by using a combination of the local and global optimum tours and edge usage, then sorts the nodes based on the maximum deviation from the optimum tours and the maximum edge usage to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_combination = np.abs(local_opt_tour - global_opt_tour)\n    edge_usage_max = np.max(edge_n_used, axis=1)\n    \n    new_distance_matrix = distance_matrix + tour_combination + edge_usage_max\n    perturb_nodes = np.argsort(np.maximum(tour_combination, edge_usage_max))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.25953,
          "other_inf": null
     }
}