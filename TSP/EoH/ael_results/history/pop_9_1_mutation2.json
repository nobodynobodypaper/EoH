{
     "parent2": {
          "algorithm": "\nThe new algorithm will identify the edges that are commonly used in the local optimal tour and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by adjusting the distances of the edges based on their frequency of use and the potential impact of perturbing each node. Finally, it will sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour and return the updated distance matrix and the sorted nodes to perturb, prioritizing nodes that will lead to minimized total distance.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, (edge_n_used + 1), out=np.zeros_like(penalty), where=(edge_n_used + 1) != 0)\n    new_distance_matrix = distance_matrix + penalty * (edge_n_used + 1)\n    perturb_impact = np.sum((1 / (edge_n_used + 1)) * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-penalty.sum(axis=1) + perturb_impact)\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.304,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nDescription:\nThe new algorithm first identifies the nodes that are frequently used in the local optimal tour and calculates the potential reduction in the total distance if each node is perturbed. Then, it updates the distance matrix by adjusting the edge distances based on their frequency of use and the impact of perturbing each node. Finally, it sorts the nodes based on the frequency of use and perturb impact, prioritizing nodes that will lead to minimized total distance, and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    node_frequency = np.zeros(distance_matrix.shape[0])\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        node_frequency[start] += 1\n        node_frequency[end] += 1\n    \n    distance_reduction = np.zeros(distance_matrix.shape[0])\n    for node in range(len(global_opt_tour) - 1):\n        global_start = global_opt_tour[node]\n        global_end = global_opt_tour[node + 1]\n        distance_reduction[global_start] += np.max(distance_matrix) / (node + 1)\n        distance_reduction[global_end] += np.max(distance_matrix) / (node + 1)\n    \n    impact_score = node_frequency + distance_reduction\n    perturb_nodes = np.argsort(-impact_score)\n\n    new_distance_matrix = distance_matrix - np.diag(distance_reduction)\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.301,
          "first_obj": null
     }
}