{
     "parent1": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by combining the sine of the difference between the local and global optimum tours, the sum of the edge usage and a random factor, and then sorts the nodes based on the maximum distance from the global optimum tour and minimum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference_sine = np.sin(local_opt_tour - global_opt_tour)\n    product_avg_random = np.sum(edge_n_used, axis=1) * np.random.rand(distance_matrix.shape[0])\n    \n    new_distance_matrix = distance_matrix + tour_difference_sine + product_avg_random\n    perturb_nodes = np.argsort(np.minimum(np.min(edge_n_used, axis=1), np.max(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.2977,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by combining the sine of the difference between the local and global optimum tours, the sum of the edge usage and a random factor, and then sorts the nodes based on the maximum distance from the global optimum tour and minimum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference_sine = np.sin(local_opt_tour - global_opt_tour)\n    product_avg_random = np.sum(edge_n_used, axis=1) * np.random.rand(distance_matrix.shape[0])\n    \n    new_distance_matrix = distance_matrix + tour_difference_sine + product_avg_random\n    perturb_nodes = np.argsort(np.minimum(np.min(edge_n_used, axis=1), np.max(new_distance_matrix, axis=1)))\n    \n    perturb_nodes = np.sort(perturb_nodes)[:10]  # Limit the number of perturb nodes to enhance generalization\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.42733,
          "other_inf": null
     }
}