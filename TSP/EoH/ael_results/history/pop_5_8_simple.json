{
     "parent1": {
          "algorithm": "Update the edge distances by considering the frequency of each edge used in the local optimal tour and incorporating a custom non-linear transformation of the edge count and distance, along with a normalized factor based on the reciprocal of edge usage, to guide the search towards a better solution.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_distance)\n\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                transformation_factor = (edge_count[i][j] ** 2) / (edge_distance[i][j] + 1)  # Custom non-linear transformation\n                normalized_factor = (1 / max(edge_n_used[i][j], 1))\n                updated_edge_distance[i][j] += transformation_factor + normalized_factor\n\n    return updated_edge_distance",
          "objective": 0.05561,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "Update the edge distances by considering the frequency of each edge used in the local optimal tour and incorporating a custom non-linear transformation of the edge count and distance, along with a normalized factor based on the reciprocal of edge usage, to guide the search towards a better solution.",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    edge_count = np.zeros_like(edge_distance)\n\n    for i in range(len(edge_n_used)):\n        start = edge_n_used[i][0]  # assuming 2D edge_n_used array\n        end = edge_n_used[i][1]\n        edge_count[start][end] += 1\n        edge_count[end][start] += 1\n\n    for i in range(edge_distance.shape[0]):\n        for j in range(edge_distance.shape[1]):\n            if edge_count[i][j] > 0:\n                normalized_factor = (1 / max(edge_n_used[i][j], 1))\n                updated_edge_distance[i][j] += edge_count[i][j] + normalized_factor\n\n    return updated_edge_distance",
          "objective": 10000000000.0,
          "other_inf": null
     }
}