{
     "parent1": {
          "algorithm": "\nThe algorithm will first identify the edges that are commonly used in the local optimal tour and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by penalizing the edges based on their frequency of use and the potential impact of perturbing each node, and finally sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-penalty.sum(axis=1) + perturb_impact)[::-1]\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.333,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nThe algorithm first identifies the nodes with the highest potential impact on reducing the total distance if perturbed, considering the edges used in the local optimal tour and the global optimal tour. Then, it updates the distance matrix by penalizing the distances based on the potential impact of perturbing each node and the frequency of use of the edges, and finally sorts the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    potential_impact = np.zeros(len(distance_matrix))\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        potential_impact[start] += edge_n_used[start][end] * (distance_matrix[start][end] - distance_matrix[start][global_opt_tour[i+1]])\n        potential_impact[end] += edge_n_used[end][start] * (distance_matrix[end][start] - distance_matrix[end][global_opt_tour[i]])\n\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used + np.outer(potential_impact, np.ones(len(distance_matrix)))\n\n    perturb_impact = potential_impact\n    perturb_nodes = np.argsort(-penalty.sum(axis=1) + perturb_impact)[::-1]\n    return new_distance_matrix, perturb_nodes",
          "objective": 2.09,
          "first_obj": null
     }
}