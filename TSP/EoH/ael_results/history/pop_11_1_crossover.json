{
     "parent1": {
          "algorithm": "\nAlgorithm description: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by adding a specific value to the distances of these edges. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix + 10 * edges_in_local_opt_tour  # Updated to adding a specific value    \n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.384,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nAlgorithm description:\nThe algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by modifying the distances of these edges based on the number of times each edge is used in the tour. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed, taking into account the impact on both the local and global optimal tours. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix + np.max(distance_matrix) * edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    \n    for node in range(len(global_opt_tour) - 1):\n        global_start = global_opt_tour[node]\n        global_end = global_opt_tour[node+1]\n        new_distance_matrix[global_start][global_end] += np.max(distance_matrix) / (node + 1)\n        new_distance_matrix[global_end][global_start] += np.max(distance_matrix) / (node + 1)\n    \n    perturb_impact += np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    \n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.415,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: \nThe new algorithm identifies the nodes that are crucial for both local and global optimal tours by considering the frequency of each node's appearance. First, it updates the distance matrix by adding a specific value to the distances of edges that are part of the local optimal tour, then modifies the distance based on the frequency of each edge in the global optimal tour. Finally, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed, and sorts the nodes based on their potential impact.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix + 10 * edges_in_local_opt_tour\n    \n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        new_distance_matrix[start][end] += np.max(distance_matrix) * edge_n_used[start][end]\n\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.545,
          "first_obj": null
     }
}