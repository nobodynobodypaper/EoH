{
     "parent1": {
          "algorithm": "\nThe new algorithm will calculate the total distance reduction if each node is perturbed in the local optimal tour and also consider the distance increase if each node is perturbed in the global optimal tour. Then, it will update the distance matrix by penalizing the edges based on the frequency of use and the potential impact of perturbing each node, and finally sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    perturb_impact_local = np.sum(edge_n_used * (distance_matrix - (distance_matrix + penalty * edge_n_used)), axis=1)\n    perturb_impact_global = np.sum(edge_n_used * ((distance_matrix + penalty * edge_n_used) - distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-penalty.sum(axis=1) + perturb_impact_local - perturb_impact_global)[::-1]\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.36,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nThe new algorithm will identify the edges that are commonly used in the local optimal tour and calculate the total distance reduction if each node is perturbed. Then, it will update the distance matrix by adjusting the distances of the edges based on their frequency of use and the potential impact of perturbing each node. Finally, it will sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour and return the updated distance matrix and the sorted nodes to perturb, prioritizing nodes that will lead to minimized total distance.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, (edge_n_used + 1), out=np.zeros_like(penalty), where=(edge_n_used + 1) != 0)\n    new_distance_matrix = distance_matrix + penalty * (edge_n_used + 1)\n    perturb_impact = np.sum((1 / (edge_n_used + 1)) * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-penalty.sum(axis=1) + perturb_impact)\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.304,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: \nThe new algorithm will analyze the frequencies of the edges used in both the local and global optimal tours to identify bottlenecks, then calculate the potential distance reduction if each bottleneck node is perturbed. It will update the distance matrix by adjusting the distances of the bottleneck edges and sort the nodes to be perturbed based on the penalty and perturb impact to avoid being trapped in the local optimum tour and finally find a tour with minimized total distance.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    bottleneck_nodes = np.zeros(distance_matrix.shape[0])\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        bottleneck_nodes[start] += 1\n        bottleneck_nodes[end] += 1\n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        bottleneck_nodes[start] += 1\n        bottleneck_nodes[end] += 1\n    bottleneck_nodes = np.divide(bottleneck_nodes, (edge_n_used + 1), out=np.zeros_like(bottleneck_nodes), where=(edge_n_used + 1) != 0)\n    new_distance_matrix = distance_matrix + np.outer(bottleneck_nodes, bottleneck_nodes) * (edge_n_used + 1)\n    perturb_impact = np.sum((1 / (edge_n_used + 1)) * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-bottleneck_nodes + perturb_impact)\n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "first_obj": null
     }
}