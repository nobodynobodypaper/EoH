{
     "parent1": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by applying a novel metric derived from the relationship between edge usage, the difference between local and global optimum tours, and a customized randomness, then sorts the nodes based on this metric to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    custom_metric = (0.5 * (edge_n_used / np.max(edge_n_used))) + (0.3 * (local_opt_tour - global_opt_tour)) + (0.2 * np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1]))\n    new_distance_matrix = distance_matrix + custom_metric\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.1105,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Create a novel algorithm that updates the distance matrix by incorporating a weighted combination of edge usage, the difference between local and global optimum tours, and a customized randomness, and then sorts the nodes based on this metric to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edge_usage_weight = 0.2\n    tour_difference_weight = 0.4\n    randomness_weight = 0.4\n    \n    custom_metric = (edge_usage_weight * (edge_n_used / np.max(edge_n_used))) + (tour_difference_weight * (local_opt_tour - global_opt_tour)) + (randomness_weight * np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1]))\n    new_distance_matrix = distance_matrix + custom_metric\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.08242,
          "other_inf": null
     }
}