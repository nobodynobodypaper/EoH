{
     "parent2": {
          "algorithm": "\nAlgorithm description: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by adding a large value to these edges. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix + np.max(distance_matrix) * edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.358,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: The new algorithm will first identify the edges that are part of the global optimal tour and update the distance matrix by subtracting a small value from these edges. Then, it will calculate the overall impact of perturbing each node by considering the combination of the distance reduction in the local optimal tour and the distance increase in the global optimal tour. Finally, it will sort the nodes based on their overall impact and return the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_global_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(global_opt_tour) - 1):\n        start = global_opt_tour[i]\n        end = global_opt_tour[i + 1]\n        edges_in_global_opt_tour[start][end] = 1\n        edges_in_global_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix - np.min(distance_matrix) * edges_in_global_opt_tour\n    perturb_impact_local = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_impact_global = np.sum(edge_n_used * (new_distance_matrix - distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact_local - perturb_impact_global)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 4.292,
          "first_obj": null
     }
}