{
     "parent1": {
          "algorithm": "Create an algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.6 * (local_opt_tour - global_opt_tour)) + (0.3 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of maximum distance from the global optimum tour and minimum edge usage\n    weighted_distance = 0.4 * np.min(new_distance_matrix, axis=1) + 0.6 * np.max(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.07567,
          "other_inf": null
     },
     "parent2": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix based on the combination of local and global optimum tours, edge usage, and a unique randomness factor, and then sorts the nodes using a scoring function that considers the difference between local and global optimum tours and the maximum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix based on the combination of local and global optimum tours, edge usage, and randomness\n    unique_randomness = np.random.uniform(-1, 1, size=distance_matrix.shape)\n    new_distance_matrix = distance_matrix + (0.6 * (local_opt_tour - global_opt_tour)) + (0.4 * edge_n_used) + unique_randomness\n    \n    # Sort the nodes using a scoring function considering the difference between local and global optimum tours and maximum edge usage\n    perturb_nodes = np.argsort(np.maximum((local_opt_tour - global_opt_tour), np.max(edge_n_used, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.08262,
          "other_inf": null
     },
     "parent3": {
          "algorithm": "Create a new algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours and edge usage, and sorts the nodes based on the minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours and edge usage\n    new_distance_matrix = (0.6 * (local_opt_tour - global_opt_tour)) + (0.4 * edge_n_used) + distance_matrix\n    \n    # Sort the nodes based on the minimum distance from the global optimum tour and maximum edge usage\n    perturb_nodes = np.argsort(np.maximum(np.min(new_distance_matrix, axis=1), np.max(edge_n_used, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06466,
          "other_inf": null
     },
     "parent4": {
          "algorithm": "Create an algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.6 * (local_opt_tour - global_opt_tour)) + (0.3 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of maximum distance from the global optimum tour and minimum edge usage\n    min_distance = np.min(new_distance_matrix, axis=1)\n    max_edge_usage = np.max(edge_n_used, axis=1)\n    weighted_distance = 0.4 * min_distance + 0.6 * max_edge_usage\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.06676,
          "other_inf": null
     },
     "parent5": {
          "algorithm": "Create an algorithm that updates the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a combination of minimum distance from the global optimum tour and maximum edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix by incorporating a weighted average of the difference between local and global optimum tours, edge usage, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.6 * (local_opt_tour - global_opt_tour)) + (0.3 * edge_n_used) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes based on a combination of maximum distance from the global optimum tour and minimum edge usage\n    weighted_distance = 0.4 * np.min(new_distance_matrix, axis=1) + 0.6 * np.max(edge_n_used, axis=1)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.07567,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "Create an algorithm that updates the distance matrix by incorporating a non-linear combination of local and global optimum tours, edge usage, and randomness, and sorts the nodes based on a unique scoring function that considers both the weighted difference between local and global optimum tours and edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix with a non-linear combination of local and global optimum tours, edge usage, and randomness\n    randomness = np.random.rand(distance_matrix.shape[0], distance_matrix.shape[1])\n    new_distance_matrix = (0.6 * np.power((local_opt_tour - global_opt_tour), 2)) + (0.4 * np.power(edge_n_used, 0.5)) + (0.1 * randomness) + distance_matrix\n    \n    # Sort the nodes using a unique scoring function that considers the weighted difference between local and global optimum tours and edge usage\n    weighted_distance = 0.5 * np.power((local_opt_tour - global_opt_tour), 2) + 0.5 * np.power(edge_n_used, 0.5)\n    perturb_nodes = np.argsort(weighted_distance)\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "other_inf": null
     }
}