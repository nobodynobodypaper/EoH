{
     "parent2": {
          "algorithm": "\nThe algorithm idea is to identify edges that are commonly used in the local optimal tour and update the distance matrix by penalizing these edges based on their frequency of use. Then, sort the nodes based on the penalty to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_nodes = np.argsort(-penalty.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.474,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nIdea: The algorithm identifies the nodes that are part of the local optimal tour, calculates the impact of perturbing each node based on their connectivity and their distance from other nodes, and updates the distance matrix. Then, it sorts the nodes based on their potential impact to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    node_connectivity = np.zeros(distance_matrix.shape[0])\n    for i in range(len(local_opt_tour)):\n        for j in range(len(local_opt_tour)):\n            if i != j:\n                node_connectivity[local_opt_tour[i]] += distance_matrix[local_opt_tour[i], local_opt_tour[j]]\n\n    perturb_impact = node_connectivity / (1 + distance_matrix.sum(axis=1))\n    perturb_nodes = np.argsort(-perturb_impact)\n\n    new_distance_matrix = distance_matrix + perturb_impact * edge_n_used\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 1.739,
          "first_obj": null
     }
}