{
     "parent1": {
          "algorithm": "\nThe new algorithm will calculate the total distance reduction if each node is perturbed in the local optimal tour and also consider the distance increase if each node is perturbed in the global optimal tour. Then, it will update the distance matrix by penalizing the edges based on the frequency of use and the potential impact of perturbing each node, and finally sort the nodes based on the penalty and perturb impact to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    perturb_impact_local = np.sum(edge_n_used * (distance_matrix - (distance_matrix + penalty * edge_n_used)), axis=1)\n    perturb_impact_global = np.sum(edge_n_used * ((distance_matrix + penalty * edge_n_used) - distance_matrix), axis=1)\n    perturb_nodes = np.argsort(-penalty.sum(axis=1) + perturb_impact_local - perturb_impact_global)[::-1]\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.36,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nAlgorithm description: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by adding a large value to these edges. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix + np.max(distance_matrix) * edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.358,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "The new algorithm aims to utilize a combination of clustering and perturbation techniques to update the distance matrix and sort the nodes for perturbation. It will first identify clusters of nodes based on the local optimal tour, then calculate the potential impact of perturbing each node in the clusters by considering the reduction in total distance. Finally, it will sort the nodes based on their potential impact and return the updated distance matrix and the sorted nodes for perturbation.",
          "code": "import numpy as np\nfrom sklearn.cluster import KMeans\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    kmeans = KMeans(n_clusters=2, random_state=0).fit(distance_matrix)\n    clusters = kmeans.labels_\n\n    cluster_impact = np.zeros((kmeans.n_clusters, distance_matrix.shape[0]))\n    for i in range(kmeans.n_clusters):\n        cluster_nodes = np.where(clusters == i)[0]\n        for node in cluster_nodes:\n            new_distance_matrix = distance_matrix.copy()\n            cluster_nodes_except = np.delete(cluster_nodes, np.where(cluster_nodes == node))\n            for start in cluster_nodes_except:\n                for end in cluster_nodes_except:\n                    new_distance_matrix[start][end] += edge_n_used[start][end]\n\n            total_distance = 0\n            for j in range(len(local_opt_tour) - 1):\n                total_distance += new_distance_matrix[local_opt_tour[j]][local_opt_tour[j+1]]\n\n            cluster_impact[i][node] = np.sum(distance_matrix) - total_distance\n\n    perturb_nodes = np.argsort(-np.max(cluster_impact, axis=0))[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "first_obj": null
     }
}