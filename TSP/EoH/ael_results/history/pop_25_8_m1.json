{
     "parent1": {
          "algorithm": "new_distance_matrix, perturb_nodes",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference = (local_opt_tour - global_opt_tour) ** 2\n    average_edge_usage = np.mean(edge_n_used, axis=1)\n    weighted_factor = 0.5 \n    inverse_distance_matrix = 1 / (distance_matrix + 1)\n    \n    new_distance_matrix = distance_matrix + (tour_difference + average_edge_usage * np.random.rand(distance_matrix.shape[0]) + inverse_distance_matrix) * weighted_factor\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.max(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.04594,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm main steps: Create a function to update the distance matrix and sort the top nodes to perturb based on the difference between local and global optimal tour and edge usage.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference = np.abs(local_opt_tour - global_opt_tour)\n    edge_usage_max = np.max(edge_n_used, axis=1)\n    distance_max = np.max(distance_matrix, axis=1)\n    \n    new_distance_matrix = distance_matrix + (tour_difference + edge_usage_max * np.random.rand(distance_matrix.shape[0]) + 1 / distance_max) * 0.5\n    perturb_nodes = np.argsort(np.maximum(edge_usage_max, distance_max))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.11144,
          "other_inf": null
     }
}