{
     "parent1": {
          "algorithm": "Create a new algorithm that updates the distance matrix by taking the weighted sum of the squared difference between the local and global optimum tours and the product of the standard deviation of edge usage and the inverse of the average edge usage, then sorts the nodes based on the minimum distance from the global optimum tour and the maximum edge usage to determine the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference_squared = (local_opt_tour - global_opt_tour) ** 2\n    standard_deviation_edge_usage = np.std(edge_n_used, axis=1)\n    inverse_average_edge_usage = 1 / np.mean(edge_n_used, axis=1)\n    weighted_sum = tour_difference_squared + (standard_deviation_edge_usage * inverse_average_edge_usage)\n    \n    new_distance_matrix = distance_matrix + weighted_sum\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.min(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 2.27706,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix by taking the absolute difference between the local and global optimum tours and the maximum edge usage, then sorts the nodes based on the maximum distance from the global optimum tour and the maximum edge usage to determine the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    tour_difference = np.abs(local_opt_tour - global_opt_tour)\n    max_edge_usage = np.max(edge_n_used, axis=1)\n    \n    weighted_sum = tour_difference + max_edge_usage\n    \n    new_distance_matrix = distance_matrix + weighted_sum\n    perturb_nodes = np.argsort(np.maximum(np.max(edge_n_used, axis=1), np.max(new_distance_matrix, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.1874,
          "other_inf": null
     }
}