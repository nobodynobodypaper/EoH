{
     "parent1": {
          "algorithm": "\nAlgorithm description: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by multiplying a factor to these edges. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix * (1 + edges_in_local_opt_tour)\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.625,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "The algorithm first updates the distance matrix based on the edge_n_used matrix, then calculates the difference between the two tours and sorts the nodes based on the difference to get the top nodes to perturb.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    new_distance_matrix = distance_matrix * (1 + edge_n_used)\n    tour_difference = np.abs(local_opt_tour - global_opt_tour)\n    perturb_nodes = np.argsort(tour_difference)[::-1]\n    return new_distance_matrix, perturb_nodes",
          "objective": 1.436,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: \nThe algorithm first identifies the edges that are commonly used in both the local and global optimal tours and updates the distance matrix by multiplying a factor to these edges. Then, it computes the impact of perturbing each node by considering the change in the total distance if that node is perturbed. Finally, it sorts the nodes based on their impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    common_edges = np.multiply(local_opt_tour, global_opt_tour)\n    new_distance_matrix = distance_matrix * (1 + common_edges)\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 1.481,
          "first_obj": null
     }
}