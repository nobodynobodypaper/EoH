{
     "parent1": {
          "algorithm": "\nAlgorithm description: \nThe new algorithm will first identify the edges that are part of the local optimal tour and update the distance matrix by increasing the distances of these edges based on their utilization using edge_n_used. Then, it will calculate the potential impact of perturbing each node by evaluating the reduction in the total distance if that node is perturbed. Finally, it will sort the nodes based on their potential impact and return the updated distance matrix and the sorted nodes to perturb, prioritizing nodes from the local optimal tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = edge_n_used[start][end]\n        edges_in_local_opt_tour[end][start] = edge_n_used[end][start]\n\n    new_distance_matrix = distance_matrix + edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    \n    # Prioritize nodes from the local optimal tour\n    perturb_nodes = []\n    for node in local_opt_tour:\n        perturb_nodes.append((node, perturb_impact[node]))\n    perturb_nodes.sort(key=lambda x: x[1], reverse=True)\n    perturb_nodes = np.array([node[0] for node in perturb_nodes])\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.731,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nAlgorithm description: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by multiplying a factor to these edges. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix * (1 + edges_in_local_opt_tour)\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.625,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description:\nThe new algorithm will first identify the nodes that are part of the local optimal tour and calculate the utilization of each node based on its edge connections. It then updates the distance matrix by increasing the distances of these edges based on their utilization. Next, it will calculate the potential impact of perturbing each node by evaluating the reduction in the total distance if that node is perturbed. Finally, it will sort the nodes based on their potential impact and return the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    node_utilization = np.sum(edge_n_used, axis=1)\n    utilization_factor = np.zeros((len(node_utilization), len(node_utilization)))\n    for i in range(len(node_utilization)):\n        for j in range(len(node_utilization)):\n            utilization_factor[i][j] = min(node_utilization[i], node_utilization[j])\n\n    updated_distance_matrix = distance_matrix + utilization_factor\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - updated_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "first_obj": null
     }
}