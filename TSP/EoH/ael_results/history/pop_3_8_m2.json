{
     "parent1": {
          "algorithm": "\nNew algorithm: Update the edge distances along the local optimal route by perturbing the distances with a random noise factor between -0.5 and 0.5 and also perturb the distances of a random neighboring route to further escape local optimum and explore the solution space.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    for i in range(len(local_opt_tour) - 1):\n        start_node = local_opt_tour[i]\n        end_node = local_opt_tour[i + 1]\n        edge_index = edge_n_used[start_node][end_node]\n        noise_factor = np.random.uniform(-0.5, 0.5)  # Add random noise to the edge distance\n        updated_edge_distance[start_node][end_node] += noise_factor\n    \n    # Perturbing the distances of a random neighboring route\n    random_route_index = np.random.randint(0, len(local_opt_tour) - 1)\n    start_node = local_opt_tour[random_route_index]\n    end_node = local_opt_tour[random_route_index + 1]\n    edge_index = edge_n_used[start_node][end_node]\n    noise_factor = np.random.uniform(-0.5, 0.5)\n    updated_edge_distance[start_node][end_node] += noise_factor\n    \n    return updated_edge_distance",
          "objective": 0.26424,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nNew algorithm: Update the edge distances along the local optimal route by perturbing the distances with a random noise factor between -0.2 and 0.2 and also perturb the distances of two random neighboring routes to further escape local optimum and explore the solution space.\n",
          "code": "import numpy as np\n\ndef update_edge_distance(edge_distance, local_opt_tour, edge_n_used):\n    updated_edge_distance = np.copy(edge_distance)\n    \n    for i in range(len(local_opt_tour) - 1):\n        start_node = local_opt_tour[i]\n        end_node = local_opt_tour[i + 1]\n        edge_index = edge_n_used[start_node][end_node]\n        noise_factor = np.random.uniform(-0.2, 0.2)  # Add random noise to the edge distance\n        updated_edge_distance[start_node][end_node] += noise_factor\n    \n    # Perturbing the distances of two random neighboring routes\n    for _ in range(2):\n        random_route_index = np.random.randint(0, len(local_opt_tour) - 1)\n        start_node = local_opt_tour[random_route_index]\n        end_node = local_opt_tour[random_route_index + 1]\n        edge_index = edge_n_used[start_node][end_node]\n        noise_factor = np.random.uniform(-0.2, 0.2)\n        updated_edge_distance[start_node][end_node] += noise_factor\n    \n    return updated_edge_distance",
          "objective": 0.60822,
          "other_inf": null
     }
}