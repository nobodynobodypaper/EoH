{
     "parent1": {
          "algorithm": "\nThe algorithm idea is to identify edges that are commonly used in the local optimal tour and update the distance matrix by penalizing these edges based on their frequency of use. Then, sort the nodes based on the penalty to determine the top nodes to perturb in order to avoid being trapped in the local optimum tour.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    penalty = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        penalty[start][end] += 1\n        penalty[end][start] += 1\n    penalty = np.divide(penalty, edge_n_used, out=np.zeros_like(penalty), where=edge_n_used != 0)\n    new_distance_matrix = distance_matrix + penalty * edge_n_used\n    perturb_nodes = np.argsort(-penalty.sum(axis=1))\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.474,
          "first_obj": null
     },
     "parent2": {
          "algorithm": "\nAlgorithm description: The algorithm first identifies the edges that are part of the local optimal tour and updates the distance matrix by adding a large value to these edges. Then, it calculates the potential impact of perturbing each node by considering the reduction in the total distance if that node is perturbed. Finally, it sorts the nodes based on their potential impact and returns the updated distance matrix and the sorted nodes to perturb.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    edges_in_local_opt_tour = np.zeros(distance_matrix.shape)\n    for i in range(len(local_opt_tour) - 1):\n        start = local_opt_tour[i]\n        end = local_opt_tour[i + 1]\n        edges_in_local_opt_tour[start][end] = 1\n        edges_in_local_opt_tour[end][start] = 1\n\n    new_distance_matrix = distance_matrix + np.max(distance_matrix) * edges_in_local_opt_tour\n    perturb_impact = np.sum(edge_n_used * (distance_matrix - new_distance_matrix), axis=1)\n    perturb_nodes = np.argsort(perturb_impact)[::-1]\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.358,
          "first_obj": null
     },
     "offspring": {
          "algorithm": "\nAlgorithm description: \nThe algorithm idea is to identify the nodes that are not part of the global optimal tour and calculate the potential improvement in total distance if these nodes are included in the tour. Then, sort the nodes based on their potential improvement to determine the top nodes to perturb in order to optimize the total distance of the tour.\n\nCode:\nimport numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    nodes_not_in_global_opt_tour = np.setdiff1d(np.arange(distance_matrix.shape[0]), global_opt_tour)\n    potential_improvement = np.zeros(distance_matrix.shape[0])\n    for node in nodes_not_in_global_opt_tour:\n        updated_opt_tour = np.insert(local_opt_tour, 1, node)\n        potential_improvement[node] = np.sum(distance_matrix[local_opt_tour]) - np.sum(distance_matrix[updated_opt_tour])\n\n    perturb_nodes = np.argsort(potential_improvement)[::-1]\n    return distance_matrix, perturb_nodes\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    nodes_not_in_global_opt_tour = np.setdiff1d(np.arange(distance_matrix.shape[0]), global_opt_tour)\n    potential_improvement = np.zeros(distance_matrix.shape[0])\n    for node in nodes_not_in_global_opt_tour:\n        updated_opt_tour = np.insert(local_opt_tour, 1, node)\n        potential_improvement[node] = np.sum(distance_matrix[local_opt_tour]) - np.sum(distance_matrix[updated_opt_tour])\n\n    perturb_nodes = np.argsort(potential_improvement)[::-1]\n    return new_distance_matrix, perturb_nodes",
          "objective": 10000000000.0,
          "first_obj": null
     }
}