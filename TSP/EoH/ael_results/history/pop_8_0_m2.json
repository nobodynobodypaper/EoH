{
     "parent1": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix based on the combination of local and global optimum tours, edge usage, and a unique randomness factor, and then sorts the nodes using a scoring function that considers the difference between local and global optimum tours and the maximum edge usage to identify the top nodes for perturbation.\n",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix based on the combination of local and global optimum tours, edge usage, and randomness\n    unique_randomness = np.random.uniform(-1, 1, size=distance_matrix.shape)\n    new_distance_matrix = distance_matrix + (0.6 * (local_opt_tour - global_opt_tour)) + (0.4 * edge_n_used) + unique_randomness\n    \n    # Sort the nodes using a scoring function considering the difference between local and global optimum tours and maximum edge usage\n    perturb_nodes = np.argsort(np.maximum((local_opt_tour - global_opt_tour), np.max(edge_n_used, axis=1)))\n    \n    return new_distance_matrix, perturb_nodes",
          "objective": 0.08262,
          "other_inf": null
     },
     "offspring": {
          "algorithm": "\nCreate a new algorithm that updates the distance matrix based on the combination of local and global optimum tours, edge usage, and a unique randomness factor, and then sorts the nodes using a scoring function that considers the square of the difference between local and global optimum tours and the sum of edge usage to identify the top nodes for perturbation.",
          "code": "import numpy as np\n\ndef get_matrix_and_nodes(distance_matrix, local_opt_tour, global_opt_tour, edge_n_used):\n    # Update the distance matrix based on the combination of local and global optimum tours, edge usage, and randomness\n    unique_randomness = np.random.uniform(-1, 1, size=distance_matrix.shape)\n    new_distance_matrix = distance_matrix + (0.6 * (local_opt_tour - global_opt_tour)**2) + (0.4 * np.sum(edge_n_used, axis=1)) + unique_randomness\n\n    # Sort the nodes using a scoring function considering the square of the difference between local and global optimum tours and sum of edge usage\n    perturb_nodes = np.argsort(np.maximum((local_opt_tour - global_opt_tour)**2, np.sum(edge_n_used, axis=1)))\n\n    return new_distance_matrix, perturb_nodes",
          "objective": 0.18879,
          "other_inf": null
     }
}